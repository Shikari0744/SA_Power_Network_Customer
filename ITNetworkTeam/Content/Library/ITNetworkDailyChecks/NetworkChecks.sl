namespace: ITNetworkDailyChecks
operation:
  name: NetworkChecks
  inputs:
    - snow_user
    - snow_pass
    - prtg_user
    - prtg_pass
  python_action:
    use_jython: false
    script: "def execute(snow_user,snow_pass,prtg_user,prtg_pass):\n    import requests\n    import json\n    import pandas as pd\n    from datetime import date\n    import win32com.client as wincom32Client\n    \n    emailAddresses = [\"wipula.wasala@sapowernetworks.com.au\", \"ravindra.rathnaweerage@sapowernetworks.com.au\"]\n    \n    def get_prtg(prtg_user,prtg_pass):\n        url = \"https://prtg/api/table.json?id=0&filter_status=5&username=\"+prtg_user+\"&passhash=\"+prtg_pass\n        payload={}\n        headers = {}\n        response = requests.request(\"GET\", url, headers=headers, data=payload, verify=False)\n        prtg_json = json.loads(response.content)\n        return prtg_json\n    \n    def format_prtg(data):\n        if data[\"\"] == []:\n            return \"No PRTG alerts\"\n        \n        df = pd.DataFrame(data[\"\"])\n        df = df[[\"group\", \"device\", \"sensor\", \"status\"]]\n        \n        # Asthetics\n        df.index += 1\n        df.columns = df.columns.str.title()\n        return df.to_html()\n    \n    # SPLUNK Data comes via email, capture using power automate flow:\n    # https://make.powerautomate.com/environments/Default-8c9b06d0-cb4a-4a03-b449-1f5a2548a910/flows/b9ba8bae-5c42-4312-a76b-5ee61cad49c0\n    def get_splunk():\n        date_today = str(date.today())\n        path = fr\"C:\\Users\\svcrpabot\\OneDrive - SA Power Networks\\IT Networks Daily Report\\Daily Splunk report\\SplunkReportEmail_{date_today}.html\"\n        file = pd.read_html(path)[0].fillna(\"\")\n        return file\n    \n    def format_splunk(data):\n        try:\n            if \"No results available\" in data[0][0]:\n                return \"No Splunk results\"\n        except:\n            errors = \"none\"\n        return data.to_html()\n    \n    def get_snowIncidents(snow_user, snow_pass):\n        # Set the request parameters\n        url = 'https://platform1.sapowernetworks.com.au/api/now/table/incident?sysparm_query=incident_state!%3D7%5Eincident_state!%3D6%5Eassignment_group%3D98228f37dbd1a7002f10483705961928%5Ecaller_id!%3D9d5de9e5930022005bc5f179077ffb07'\n        \n        # Set proper headers\n        headers = {\"Content-Type\":\"application/json\",\"Accept\":\"application/json\"}\n        \n        # Do the HTTP request\n        response = requests.get(url, auth=(snow_user, snow_pass), headers=headers )\n        \n        # Check for HTTP codes other than 200\n        if response.status_code != 200: \n            print('Status:', response.status_code, 'Headers:', response.headers, 'Error Response:',response.json())\n            exit()\n            \n        # Decode the JSON response into a dictionary and use the data\n        data = response.json()\n        \n        return data\n    \n    def format_snow_incidents(data):\n        df = pd.DataFrame(data['result'])\n        df = df[[\"sys_created_on\", \"number\", \"short_description\", \"sys_id\"]]\n        df[\"Incident URL\"] = r\"https://platform1.sapowernetworks.com.au/nav_to.do?uri=%2Fincident.do%3Fsys_id%3D\" + df[\"sys_id\"]\n        df = df.drop(\"sys_id\", axis=1)\n        \n        # Asthetics\n        df.index += 1\n        df.columns = df.columns.str.title()\n        return df.to_html()\n    \n    def sendEmail(emailAddresses, subject, HTMLbody, files):\n        iConf = wincom32Client.Dispatch(\"CDO.Configuration\")\n        Flds = iConf.Fields\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/smtpserver\").Value = \"emanager\"\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\").Value = 25\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/sendusing\").Value = 2 \n        Flds('http://schemas.microsoft.com/cdo/configuration/smtpauthenticate').Value = 0 \n        Flds.Update()\n        iMsg = wincom32Client.Dispatch(\"CDO.Message\")\n        iMsg.Configuration = iConf\n        iMsg.To = \";\".join(emailAddresses)\n        iMsg.From = \"Process_Automation@sapowernetworks.com.au\"\n        iMsg.Subject = subject\n        iMsg.HTMLBody = HTMLbody\n        # The following assumes the files to be in the current directory\n        for file in files:\n            iMsg.AddAttachment(file)\n        iMsg.Send()\n    \n    def collate_reports(reports_dict):\n        final_report_html = \"<style>\\\n                                h1 { \\\n                                    display: block;\\\n                                    font-size: 2em;\\\n                                    margin-top: -1.91em;\\\n                                    margin-bottom: -1.91em;\\\n                                    margin-left: 0;\\\n                                    margin-right: 0;\\\n                                    font-weight: bold;\\\n                                }\\\n                                h2 { \\\n                                display: block;\\\n                                margin-top: -1.91em;\\\n                                margin-bottom: -1.91em;\\\n                                margin-left: 0;\\\n                                margin-right: 0;\\\n                                font-weight: bold;\\\n                                }\\\n                                p { \\\n                                display: block;\\\n                                margin-top: -1.91em;\\\n                                margin-bottom: 1em;\\\n                                margin-left: 0;\\\n                                margin-right: 0;\\\n                                }\\\n                                </style>\"\n        final_report_html += f\"<h1>IT Networks Daily Update</h1><p><i>{date.today()}</i></p>\"\n        for report_name, report_html in reports_dict.items():\n            final_report_html += f\"<h2>{report_name}</h2>{report_html}<br><br>\"\n            \n        final_report_html += \"<hr>\"\n        return final_report_html\n    \n    \n    # --- START SCRIPT ---\n    # Get Snow formatted results\n    snow_incident_data = get_snowIncidents(snow_user, snow_pass)\n    formatted_snow_incidents_html = format_snow_incidents(snow_incident_data)\n    \n    # Get Splunk formatted results\n    splunk_data = get_splunk()\n    formatted_splunk_data_html = format_splunk(splunk_data)\n    \n    # Get prtg formatted results\n    prtg_data = get_prtg(prtg_user,prtg_pass)\n    formatted_prtg_html = format_prtg(prtg_data)\n    \n    # TO DO: Get NDI Data\n    # TO DO: Get dnac Data\n    # TO DO: Get ISE Data\n    \n    # Put html in dict & get html for email\n    reports_dict = {\n        \"ServiceNow Incidents\": formatted_snow_incidents_html,\n        \"PRTG Alerts\": formatted_prtg_html,\n        \"Splunk Report\": formatted_splunk_data_html,\n    }\n    final_report_html = collate_reports(reports_dict)\n    \n    subject = f\"IT Networks Daily Update | {date.today()}\"\n    sendEmail(emailAddresses, subject, final_report_html, [])"
  results:
    - SUCCESS
