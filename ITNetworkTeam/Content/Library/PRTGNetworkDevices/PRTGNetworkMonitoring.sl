namespace: PRTGNetworkDevices
operation:
  name: PRTGNetworkMonitoring
  inputs:
    - username
    - passhash
  python_action:
    use_jython: false
    script: "def execute(username, passhash):\r\n    # Created by Aidan King\r\n    # Pip install: pywin32, pandas\r\n    \r\n    from datetime import date, timedelta\r\n    from typing import Union\r\n    #import win32com.client as client\r\n    import pandas as pd\r\n    import os \r\n    import os.path \r\n    global pd, date, timedelta, wincom32Client, os, root\r\n    import win32com.client as wincom32Client\r\n    import os\r\n    \r\n    outputText = \"C:/Users/svcrpabot/OneDrive - SA Power Networks/Network Devices/emailbody.txt\"\r\n\r\n    if os.path.exists(outputText):\r\n        os.remove(outputText)\r\n    \r\n    def getData(startDate: date, endDate: date, username: str, passhash: str) -> Union[bool, dict]:\r\n        \"\"\"\r\n        getData retrieves the network device changes via GET API calls to the PRTG network monitoring system.\r\n        \r\n        :startDate: The starting date of the weekly report. Only device data since the starting date will be downloaded.\r\n        :endDate: The ending date of the weekly report. Only device data up till this date will be downloaded.\r\n        :username: The API username.\r\n        :passhash: The API passhash.\r\n        :return: Returns whether the API calls were successful along with a list of pandas dataframes for each API status call to the PRTG network monitoring system.\r\n        \"\"\"\r\n        # A dictionary that stores the data for each downloaded status API call.\r\n        apiDataDict = {}\r\n      \r\n        # Loops through each API call. Each API call will pull different status information from the PRTG network monitoring system.\r\n        for status in apiStatusDict.keys():\r\n        \r\n            # Ceate the url for the API call.\r\n            url = \"https://prtg/api/table.csv?content=messages&columns=objid,datetime,type,name,device,message&filter_status=\" + status + \"&filter_dstart=\" + str(startDate) + \"-00-00-00&filter_dend=\" + str(endDate) + \"-00-00-00&username=\" + username + \"&passhash=\" + passhash\r\n            \r\n            # Attempt to download the API information from the PRTG network monitoring system into a pandas dataframe table and store this within a dictionary.\r\n            try:\r\n                apiData = pd.read_csv(url)\r\n                \r\n                # Add API data to dictionary if the status call contains data.\r\n                if apiData.empty == False: \r\n                    apiDataDict[status] = apiData\r\n            except:\r\n                # Return false if an API call was unsuccessful.\r\n                return False, apiDataDict\r\n                \r\n        # Returns True if all API calls were successful along with a dictionary of pandas dataframes that represent each API status call.\r\n        return True, apiDataDict\r\n    \r\n    def addTable(apiStatusDict: dict, apiDataDict: dict) -> str:\r\n        \"\"\"\r\n        addTable formats the API data downloaded into html tables that can be read in outlook.\r\n        \r\n        :apiStatusDict: A dictionary containing a list of the API statuses and columns that will be downloaded.\r\n        :apiDataDict: A dictionary of pandas dataframes that represent each API status call.\r\n        :return: A html string of the API data formatted into tables for the email body/contents. \r\n        \"\"\"\r\n        # Table that will store all API table data formatted into a html string.\r\n        tables = \"\"\r\n        \r\n        # Loop through each API status downloaded from the PRTG Monitoring System.\r\n        for status, apiData in apiDataDict.items():\r\n            \r\n            # Create a heading based on the API status above each table.\r\n            tables += \"<p><strong><u>\" + apiStatusDict.get(status)[0] + \"</u></strong></p>\"\r\n            \r\n            # If status is created devices (501) then display only unique devices and drop unused columns.      \r\n            if status == \"501\":\r\n                apiData.drop_duplicates(subset='Device', keep=\"first\", inplace=True)\r\n                \r\n            apiData = apiData[apiData.columns.intersection(apiStatusDict.get(status)[1])]\r\n            \r\n            # Rename Message(RAW) column to Message.\r\n            if \"Message(RAW)\" in apiData.columns:\r\n                apiData = apiData.rename(columns={'Message(RAW)': 'Message'})\r\n                \r\n            tables += apiData.to_html(index=False)\r\n            \r\n        return tables\r\n    \r\n    def formatEmail(apiCallSuccess: bool, apiStatusDict: dict, apiDataDict: dict, startDate: date, endDate: date) -> str:\r\n        \"\"\"\r\n        formatEmail formats the api data downloaded so that it can be read when sent via email.\r\n        \r\n        :apiCallSuccess: A boolean for whether the API data download was able to successfully connect to the PRTG Monitoring System.\r\n        :apiStatusDict: A dictionary containing a list of the API statuses and columns that will be downloaded.\r\n        :apiDataDict: A dictionary of pandas dataframes that represent each API status call.\r\n        :startDate: The starting date of the weekly report. Only device data since the starting date will be downloaded.\r\n        :endDate: The ending date of the weekly report. Only device data up till this date will be downloaded.\r\n        :return: Returns a html string of the email body/contents.\r\n        \"\"\"     \r\n        # Add initial sentence to email body/content \r\n        emailBody = \"<p>The scheduled report 'Weekly PRTG Network Device Changes' has run for the period \" + startDate.strftime(\"%d-%m-%Y\") + \" to \" + (endDate - timedelta(days = 1)).strftime(\"%d-%m-%Y\")\r\n        \r\n        # Check if the API calls to the PRTG monitoring system were successful.\r\n        if apiCallSuccess == True:\r\n            \r\n            # Check if the API calls are empty. If it is empty then no network changes have occured recently.\r\n            if len(apiDataDict) == 0:\r\n                emailBody += \":<br><br>There doesn't appear to be any network changes within the last week!<\\p>\"\r\n                \r\n            # If there is data for the API calls, add there contents to the email body.\r\n            else:\r\n                tables = addTable(apiStatusDict, apiDataDict)\r\n                emailBody += \":</p>\" + tables\r\n                \r\n        # If the API calls weren't successful display error message in email.           \r\n        else:\r\n            emailBody += \" but a critical error has occured.<\\p>\"\r\n            \r\n        # Returns a html string of the email body/contents.\r\n        emailBody += \"<br><br>\"\r\n        return emailBody\r\n    \r\n    def sendEmail(to, subject, HTMLbody):\r\n        iConf = wincom32Client.Dispatch(\"CDO.Configuration\")\r\n        Flds = iConf.Fields\r\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/smtpserver\").Value = \"emanager\"\r\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/smtpserverport\").Value = 25\r\n        Flds(\"http://schemas.microsoft.com/cdo/configuration/sendusing\").Value = 2\r\n        Flds('http://schemas.microsoft.com/cdo/configuration/smtpauthenticate').Value = 0\r\n        Flds.Update()\r\n        emailAddresses = to.split(\",\")\r\n        iMsg = wincom32Client.Dispatch(\"CDO.Message\")\r\n        iMsg.Configuration = iConf\r\n        iMsg.To = \";\".join(emailAddresses)\r\n        iMsg.From = \"Process_Automation@sapowernetworks.com.au\"\r\n        iMsg.Subject = subject\r\n        iMsg.HTMLBody = HTMLbody\r\n        iMsg.Send()\r\n    \r\n    \r\n    ### Main ###\r\n    \r\n    # A dictionary containing a list of the API statuses and columns that will be downloaded.\r\n    apiStatusDict = {\r\n      \"501\": [\"Created Devices\", [\"ID\",\"Date Time\", \"Device\"]],\r\n      \"502\": [\"Deleted Devices\", [\"ID\",\"Date Time\", \"Device\"]],\r\n      \"503\": [\"Moved Devices\", [\"ID\",\"Date Time\", \"Device\"]],\r\n      \"504\": [\"Edited Devices\", [\"ID\", \"Date Time\", \"Type\", \"Object\", \"Device\"]],\r\n      \"505\": [\"Created (Includes Devices & Sensors)\", [\"ID\", \"Date Time\", \"Type\", \"Object\", \"Message(RAW)\"]],\r\n      \"506\": [\"Deleted (Includes Devices & Sensors)\", [\"ID\", \"Date Time\", \"Type\", \"Object\", \"Message(RAW)\"]],\r\n      \"507\": [\"Moved (Includes Devices & Sensors)\", [\"ID\", \"Date Time\", \"Type\", \"Object\", \"Message(RAW)\"]],\r\n    }\r\n    \r\n    # Retrieve the start and end date of the weekly report (Format: YYYY-MM-DD).\r\n    startDate = (date.today() - timedelta(days = 7))\r\n    endDate = date.today()\r\n    \r\n    # Download any network device changes detected by the PRTG network monitoring system.\r\n    apiCallSuccess, apiDataDict = getData(startDate, endDate, username, passhash)\r\n    \r\n    # Formats the API data downloaded into html to be sent via email.\r\n    emailBody = formatEmail(apiCallSuccess, apiStatusDict, apiDataDict, startDate, endDate)\r\n    \r\n    # Sends an email to the Network Team.\r\n    to = \"wansupport@sapowernetworks.com.au,aidan.king@sapowernetworks.com.au\"\r\n    \r\n    subject = \"PRTG Automation Script - Network Device Changes: \" + startDate.strftime(\"%d-%m-%Y\") + \" to \" + (endDate - timedelta(days = 1)).strftime(\"%d-%m-%Y\")\r\n    body = emailBody\r\n    \r\n    sendEmail(to, subject, body)\r\n    \r\n    # Below text is used to send email body/content to a textfile for importing into VBScript rather then sending it directly to email.\r\n    f = open(outputText, \"w\")\r\n    f.write(to + \"|\" + subject + \"|\" + body)\r\n    f.close()\r\n        \r\n    return{\"outputText\":outputText}"
  outputs:
    - outputText
  results:
    - SUCCESS
