namespace: OperationsPlanningPBIDatasourcesMonthly
operation:
  name: UploadFiles
  inputs:
    - accessToken
    - LoopTrend
    - filePath
  python_action:
    use_jython: false
    script: "def execute(accessToken,filePath,LoopTrend):\n    import requests\n    import urllib.parse \n    import os\n    \n    response = \"\"\n    \n    datasources = [LoopTrend]\n    \n    for file in datasources:\n        #CHECK SIZE OF FILE\n        file_path = filePath+file\n        fileSize = os.path.getsize(file_path)\n        #IF FILE IS GREATER THAN 4MB\n        if fileSize > 4000000:    \n            headers={'Authorization': 'Bearer ' + accessToken}\n            result = requests.get(\"https://graph.microsoft.com/v1.0/drives/b!iNpCk0vDRUqjFOiHGRUw6yEF2KAbQ0VOhsv1sr1znznU9gwbqyvFS4r2ab-uNM6X/root:/Planning/Reporting/Datasets/\", headers=headers)\n            if result.status_code >= 200 and result.status_code < 300:    \n                result.raise_for_status()\n                folder_info = result.json()\n                folder_id = folder_info['id']\n                file_url = urllib.parse.quote(file)\n                result = requests.post(f\"https://graph.microsoft.com/v1.0/drives/b!iNpCk0vDRUqjFOiHGRUw6yEF2KAbQ0VOhsv1sr1znznU9gwbqyvFS4r2ab-uNM6X/items/016LIE3NECTBQOHXES45CLQIKGG4CSPJCO:/{file_url}:/createUploadSession\",headers=headers,json={'@microsoft.graphconflictBehavior':'replace','description':'A large test file','fileSystemInfo':{'@odata.type': 'microsoft.graph.fileSystemInfo'}, 'name': file})\n                if result.status_code >= 200 and result.status_code < 300:      \n                    result.raise_for_status()\n                    upload_session = result.json()\n                    upload_url = upload_session['uploadUrl']\n                    st = os.stat(file_path)\n                    size = st.st_size\n                    CHUNK_SIZE = 10485760\n                    chunks = int(size / CHUNK_SIZE) + 1 if size % CHUNK_SIZE > 0 else 0\n                    with open(file_path, 'rb') as fd:\n                        start = 0\n                        for chunk_num in range(chunks):\n                            chunk = fd.read(CHUNK_SIZE)\n                            bytes_read = len(chunk)\n                            upload_range = f'bytes {start}-{start + bytes_read - 1}/{size}'\n                            result = requests.put(upload_url,headers={'Content-Length': str(bytes_read),'Content-Range': upload_range},data=chunk)\n                            if result.status_code >= 200 and result.status_code < 300:\n                                response = response + file + \" \" + result.reason + \",\"                   \n                                result.raise_for_status()\n                                start += bytes_read\n                            else:\n                                response = response + file + \" \" + result.reason + \",\"    \n        else:\n            # read file into binary\n            body = open(file_path, 'rb').read()\n            url = 'https://graph.microsoft.com/v1.0/drives/b!iNpCk0vDRUqjFOiHGRUw6yEF2KAbQ0VOhsv1sr1znznU9gwbqyvFS4r2ab-uNM6X/root:/Planning/Reporting/Datasets/'+file+':/content'\n            head = {\"Authorization\": \"Bearer \" + accessToken, \"Content-Type\": \"application/binary\"}\n            result = requests.put(url, data=body, headers=head)\n            if result.status_code >= 200 and result.status_code < 300:\n                response = response + file + \" \" + result.reason + \",\"\n            else:\n                response = response + file + \" \" + result.reason + \",\"   \n    return{\"response\":response}"
  outputs:
    - response
  results:
    - FAILURE: '${response == ""}'
    - SUCCESS
