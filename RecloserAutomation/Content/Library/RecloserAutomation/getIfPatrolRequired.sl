namespace: RecloserAutomation
operation:
  name: getIfPatrolRequired
  inputs:
    - runD:
        required: false
  python_action:
    use_jython: false
    script: "def execute(runD):\r\n    global requests, xmltodict, date, datetime,timedelta,pd,os,xlsxwriter,xlrd,logging, root, yesterday\r\n    import requests\r\n    import xmltodict\r\n    from datetime import date, datetime, timedelta\r\n    import pandas as pd \r\n    import os\r\n    import xlsxwriter\r\n    import xlrd\r\n    import logging\r\n\t\r\n    root = \"C:/Users/svcrpabot/OneDrive - SA Power Networks/Recloser Patrol Automation/\"\r\n\r\n    logging.basicConfig(\r\n    level=logging.DEBUG,\r\n    format=\"{asctime} - {levelname} - {message}\",\r\n    style='{',\r\n    filename=f\"{root}/logs/getIfPatrolRequired.log\",\r\n    filemode='a'\r\n    )\r\n\r\n    if runD == \"\":\r\n        yesterday = datetime.today().date() - timedelta(1)\r\n    else:\r\n        yesterday = datetime.strptime(runD, '%d/%m/%Y').date() - timedelta(1)\r\n\r\n    df_validRecloses = pd.read_csv(f\"{root}Valid Reclose Output/validRecloses_{yesterday}.csv\", \r\n\t\t\t\t\t\t\t\t\tparse_dates=['Outage Start Time', \"Outage End Time\"], \r\n\t\t\t\t\t\t\t\t\tdayfirst=True,\r\n\t\t\t\t\t\t\t\t\tdtype={'Rainfall-2h (mm)': 'string', \r\n\t\t\t\t\t\t\t\t\t'Rainfall-1h (mm)': 'string', \r\n\t\t\t\t\t\t\t\t\t'Rainfall+0h (mm)': 'string',\r\n\t\t\t\t\t\t\t\t\t'Rainfall+1h (mm)': 'string',\r\n\t\t\t\t\t\t\t\t\t'Rainfall+2h (mm)': 'string',\r\n\t\t\t\t\t\t\t\t\t'Average Wind Speed (kph)': 'string',\r\n\t\t\t\t\t\t\t\t\t'Average Rainfall': 'string',\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t) # Get valid recloses\r\n    df_historicalRecloses = pd.read_csv(f\"{root}Historical Reports/historicalRecloses_{yesterday - timedelta(1)}.csv\", \r\n\t\t\t\t\t\t\t\t\tparse_dates=['Outage Start Time', \"Outage End Time\"], \r\n\t\t\t\t\t\t\t\t\tdayfirst=True) # Get lastest file of historical recloses\r\n    df_animalEventLookup = pd.read_excel(f\"{root}Automation Input Files/Animal Related Reclose events by feeder.xlsx\") # Get animal event lookup\r\n\t\r\n\t# --- TRANSFORM DATA ---\r\n    df_validRecloses[\"Patrol level\"] = \"\"\r\n    df_validRecloses[\"Patrol trigger reason\"] = \"\"\r\n    df_validRecloses[\"Patrol level reason\"] = \"\"\r\n\t\r\n\t# --- Valid Recloses ---\r\n\t# Replace na's as 0.\r\n    weatherColumns = ['Rainfall-2h (mm)', \r\n\t\t\t\t\t'Rainfall-1h (mm)',\r\n\t\t\t\t\t'Rainfall+0h (mm)',\r\n\t\t\t\t\t'Rainfall+1h (mm)',\r\n\t\t\t\t\t'Rainfall+2h (mm)',\r\n\t\t\t\t\t'Average Wind Speed (kph)',\r\n\t\t\t\t\t'Average Rainfall',\r\n\t\t\t\t\t\t\t\t\t]\r\n    for weatherColumn in weatherColumns: \r\n        df_validRecloses[weatherColumn] = df_validRecloses[weatherColumn].str.replace('na', '-1')\r\n\t\r\n\t# --- Animal Event Lookup\r\n\t# Convert Nan to blank\r\n    df_animalEventLookup[\"Animals\"] = df_animalEventLookup[\"Animals\"].fillna(\"\")\r\n\t\r\n\t# Convert weather data to float type\r\n    df_validRecloses = df_validRecloses.astype({'Rainfall-2h (mm)': 'float', \r\n\t\t\t\t\t\t\t\t\t'Rainfall-1h (mm)': 'float', \r\n\t\t\t\t\t\t\t\t\t'Rainfall+0h (mm)': 'float',\r\n\t\t\t\t\t\t\t\t\t'Rainfall+1h (mm)': 'float',\r\n\t\t\t\t\t\t\t\t\t'Rainfall+2h (mm)': 'float',\r\n\t\t\t\t\t\t\t\t\t'Average Wind Speed (kph)': 'float',\r\n\t\t\t\t\t\t\t\t\t'Average Rainfall': 'float',\r\n\t\t\t\t\t\t\t\t\t})\r\n\t\r\n\t# --- Define Variables ---\r\n    df_patrolsRequired = None # Create new DF\r\n    #if runD != \"\":\r\n    #    todayDate = datetime.strptime(runD, '%d/%m/%Y').date()\r\n    #else:\r\n    #    todayDate = datetime.today().date() # Get today's Date\r\n\t\r\n\t# Remove any tickets that were already picked up in the previous day's report by removing any events with incident IDs\r\n\t# found in the historical dataset. This only leaves events that didn't appear the last day, which will occur in the event\r\n\t# they aren't archieved quickly enough \r\n    df_validRecloses = df_validRecloses[~df_validRecloses[\"Incident ID\"].isin(df_historicalRecloses[\"Incident ID\"])]\r\n\r\n    for idx, row in df_validRecloses.iterrows():\r\n\r\n        # 1. Patrol already issued per NOC procdure?\r\n        # 1.1 Patrol should already be issued for feeders with SD prefix in feederID. So, we send a don't patrol message.\r\n        if row[\"Feeder ID\"][:2].upper() == \"SD\":\r\n            df_validRecloses[\"Patrol level\"][idx] = 0\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Sub-Transmission Line - Patrol dispatched by NOC\"\r\n            continue\r\n        # 1.2 Reclose related to a subsequent outage? \r\n        reclosesIn24hr = sum(df_validRecloses[\"Protection Device\"].str.count(row[\"Protection Device\"]))\r\n        if reclosesIn24hr > 1:\r\n            df_validRecloses[\"Patrol level\"][idx] = 0\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Multiple Recloses - 2 or more reclose events in 24 hours\"\r\n            df_validRecloses[\"Patrol level reason\"][idx] = f\"{reclosesIn24hr} reclose incidents in 24 hours\"\r\n            continue\r\n        \r\n        try:\r\n            # 2. Cause found - Sustained outage after reclose\r\n            if row[\"Did Sustained Outage Occur\"].lower() == \"yes\":\r\n                df_validRecloses[\"Patrol level\"][idx] = 0\r\n                df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Cause found - Sustained outage after reclose\"\r\n                continue\r\n        except:\r\n            logging.error(\"Sustained outage column not found.\")\r\n            logging.debug(f\"{row.index.to_list()}\")\r\n            quit()\r\n            \r\n\r\n        fourWeeks_prior =  row[\"Outage Start Time\"] - timedelta(weeks=4)\r\n        df_reclosesLast4weeks = df_historicalRecloses[(df_historicalRecloses[\"Outage End Time\"] >= fourWeeks_prior)]\r\n\r\n        # 3. Reclose occured at exact time of lightning strike?\r\n        # TODO: This is a WIP\r\n\r\n        # 4. Metro Feeder in Bat Season?\r\n        # Is this in an area where history shows bats interfere with powerlines and reclose evnets\r\n        # occurered between December and April, 9 pm and 7 am?\r\n        animalsOnFeeder_rows = df_animalEventLookup[df_animalEventLookup[\"Feeder No\"] == row[\"Feeder ID\"]][\"Animals\"]\r\n        if not animalsOnFeeder_rows.empty:\r\n            animalsOnFeeder = animalsOnFeeder_rows.values[0].lower()\r\n        else:\r\n            # In the case no animal data exists\r\n            df_validRecloses[\"Patrol level\"][idx] = \"Check Animal Data\" \r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Check Animal Data - Animal data not found for feeder\"\r\n            df_validRecloses[\"Patrol level reason\"][idx] = f\"Animal data not found for feeder ID '{row['Feeder ID']}'\"\r\n            continue\r\n        if \"bats\" in animalsOnFeeder:\r\n            if row[\"Outage Start Time\"].month <= 4 or row[\"Outage Start Time\"].month >= 12: # Check if reclose happened between December and April, inclusive\r\n                if row[\"Outage Start Time\"].hour <= 6 or row[\"Outage Start Time\"].hour >= 21: # Check if reclose was between 9PM and 7AM\r\n                    df_validRecloses[\"Patrol level\"][idx], df_validRecloses[\"Patrol level reason\"][idx] = get_PatrolLevel(row[\"Protection Device\"], df_reclosesLast4weeks) # PATROL\r\n                    df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Bat - Metro feeder in bat season\"\r\n                    continue\r\n\r\n        # 5. Suspect animal (fine weather, month, time, feeder)?\r\n        # Is this an area where history shows possums or bats interfere with powerlines \r\n        # and reclose events occurred between October and March, 10 pm and 6 am?\r\n        animalsOnFeeder_rows = df_animalEventLookup[df_animalEventLookup[\"Feeder No\"] == row[\"Feeder ID\"]][\"Animals\"]\r\n        if not animalsOnFeeder_rows.empty:\r\n            animalsOnFeeder = animalsOnFeeder_rows.values[0].lower()\r\n        else:\r\n            df_validRecloses[\"Patrol level\"][idx] = \"Check Animal Data\" # PATROL\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Check Animal Data - Animal data not found for feeder\"\r\n            df_validRecloses[\"Patrol level reason\"][idx] = f\"Animal data not found for feeder ID '{row['Feeder ID']}'\"\r\n            continue\r\n        # Check for possums\r\n        if \"possums\" in animalsOnFeeder:\r\n            if row[\"Weather type\"] == \"Fine\":\r\n                if row[\"Outage Start Time\"].month <= 3 or row[\"Outage Start Time\"].month >= 10: # Check if reclose happened between october and march, inclusive\r\n                    if row[\"Outage Start Time\"].hour <= 5 or row[\"Outage Start Time\"].hour >= 22: # Check if reclose was between 10PM and 6AM\r\n                        df_validRecloses[\"Patrol level\"][idx] = 0\r\n                        df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Possum - Hills feeder during possum active time\"\r\n                        continue\r\n        # Check for birds\r\n        if \"birds\" in animalsOnFeeder:\r\n            if row[\"Weather type\"] == \"Fine\":\r\n                if row[\"Outage Start Time\"].month <= 3 or row[\"Outage Start Time\"].month >= 10: # Check if reclose happened between october and march, inclusive\r\n                    if row[\"Outage Start Time\"].hour > 5 and row[\"Outage Start Time\"].hour <= 20: # Check if reclose was between 6AM and 8PM ](DAYLIGHT SAVINGS)\r\n                    #if row[\"Outage Start Time\"].hour <= 5 or row[\"Outage Start Time\"].hour >= 20: # Check if reclose was between 6AM and 8PM \r\n                        df_validRecloses[\"Patrol level\"][idx] = 0\r\n                        df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Bird - Daytime reclose during bird active time\"\r\n                        continue\r\n                else: # Else if reclose happened between April and September, inclusive\r\n                    if row[\"Outage Start Time\"].hour > 5 and row[\"Outage Start Time\"].hour <= 18: # Check if reclose was between 6AM and 6PM\r\n                        df_validRecloses[\"Patrol level\"][idx] = 0\r\n                        df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Bird - Daytime reclose during bird active time\"\r\n                        continue\r\n        # if no animals, weather is fine and during the day, suspect birds\r\n        if animalsOnFeeder == '':\r\n            if row[\"Weather type\"] == \"Fine\":\r\n                if row[\"Outage Start Time\"].month <= 3 or row[\"Outage Start Time\"].month >= 10: # Check if reclose happened between october and march, inclusive\r\n                    if row[\"Outage Start Time\"].hour > 5 and row[\"Outage Start Time\"].hour <= 20: # Check if reclose was between 6AM and 8PM ](DAYLIGHT SAVINGS)\r\n                    #if row[\"Outage Start Time\"].hour <= 5 or row[\"Outage Start Time\"].hour >= 20: # Check if reclose was between 6AM and 8PM \r\n                        df_validRecloses[\"Patrol level\"][idx] = 0\r\n                        df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Bird - Daytime reclose during bird active time\"\r\n                        continue\r\n                else: # Else if reclose happened between April and September, inclusive\r\n                    if row[\"Outage Start Time\"].hour > 5 and row[\"Outage Start Time\"].hour <= 18: # Check if reclose was between 6AM and 6PM\r\n                        df_validRecloses[\"Patrol level\"][idx] = 0\r\n                        df_validRecloses[\"Patrol trigger reason\"][idx] = \"Suspect Bird - Daytime reclose during bird active time\"\r\n                        continue  \r\n\r\n        # 6. High or Med BFR (during BF season)?\r\n        # Check if in High or Medium Bush Fire Risk Area, in bushfire season (nov[11] to april[4])\r\n        # If TRUE (in bushfire area during season) then PATROL\r\n        # If FALSE (no BFR), goto next question\r\n        bushFireSeason_mask = row[\"Outage Start Time\"].month <= 4 or row[\"Outage Start Time\"].month >= 11 \r\n        temp = row[\"Outage Start Time\"].month <= 4 or row[\"Outage Start Time\"].month >= 11 \r\n        print(row[\"Outage Start Time\"].month <= 4 or row[\"Outage Start Time\"].month >= 11 )\r\n        if (row[\"Bushfire Risk Area\"] in [\"HBFRA\", \"MBFRA\"]) and bushFireSeason_mask:\r\n            df_validRecloses[\"Patrol level\"][idx] = 1 # PATROL\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = f\"Bushfire Risk - Bushfire risk area in bushfire season\"\r\n            df_validRecloses[\"Patrol level reason\"][idx] = f\"{reclosesIn24hr} reclose incidents in 24 hours\"\r\n            continue\r\n            \r\n            \r\n        # 7. Repeat reclose in 4 weeks on same phase(s)? \r\n        # Check if this recloser has reclosed in past 4 weeks\r\n        if row[\"Protection Device\"] in df_reclosesLast4weeks[\"Protection Device\"].values:\r\n            \r\n            row_phases = row[\"Phase / Zone\"].split(\", \")\r\n            historic_phases = df_reclosesLast4weeks[df_reclosesLast4weeks[\"Protection Device\"]==row[\"Protection Device\"]][\"Phase / Zone\"]\r\n\r\n            # Check if repeat reclose is occuring on the same phases as in the past\r\n            if row[\"Phase / Zone\"] == \"No Phase Data\":\r\n                pass\r\n            elif is_itemInSeriesSubstring(historic_phases, row_phases):\r\n                df_validRecloses[\"Patrol level\"][idx], df_validRecloses[\"Patrol level reason\"][idx] = get_PatrolLevel(row[\"Protection Device\"], df_reclosesLast4weeks) # PATROL\r\n                df_validRecloses[\"Patrol trigger reason\"][idx] = \"Repeat Reclose - Same device reclosed in on same phase\"\r\n                continue\r\n        else:\r\n            df_validRecloses[\"Patrol level\"][idx] = 0\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = \"No repeat - Recloser has not reclosed in last 4 weeks to incident\"\r\n            continue\r\n\r\n        # 8. Repeat reclose & rainy or windy weather during any reclose? \r\n        # Was it damp or windy when the reclose occurred?\r\n        # Only look 2 hours before and 1 hours after\r\n        if row[\"Weather type\"] == \"Rainy\":\r\n            df_validRecloses[\"Patrol level\"][idx], df_validRecloses[\"Patrol level reason\"][idx] = get_PatrolLevel(row[\"Protection Device\"], df_reclosesLast4weeks) # PATROL\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = \"Rain - Device likely in rain/damp at reclose time\"\r\n            continue\r\n        # Was the mean wind speed >= 25kph at time of incident?\r\n        if row[\"Weather type\"] == \"Windy\":\r\n            df_validRecloses[\"Patrol level\"][idx], df_validRecloses[\"Patrol level reason\"][idx] = get_PatrolLevel(row[\"Protection Device\"], df_reclosesLast4weeks) # PATROL\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = \"Wind - Wind speed greater than 25kph\"\r\n            continue\r\n        if row[\"Weather type\"] == \"Windy and Rainy\":\r\n            df_validRecloses[\"Patrol level\"][idx], df_validRecloses[\"Patrol level reason\"][idx] = get_PatrolLevel(row[\"Protection Device\"], df_reclosesLast4weeks) # PATROL\r\n            df_validRecloses[\"Patrol trigger reason\"][idx] = \"Wind and Rain - Wind speed greater than 25kph and device likely in rain/damp at reclose time\"\r\n            continue\r\n\r\n        # END OF MATRIX - No patrol\r\n        df_validRecloses[\"Patrol level\"][idx] = 0\r\n        df_validRecloses[\"Patrol trigger reason\"][idx] = \"End of matrix - Patrol not nessecary\"\r\n        continue \r\n\t\r\n\r\n    df_validRecloses = formatReport_validReclosers(df_validRecloses)\r\n\r\n    # Overwrite valid recloses in file\r\n    df_validRecloses.to_csv(f\"{root}Valid Reclose Output/validRecloses_{yesterday}.csv\", index=False)\r\n\r\n    validReclosesWithPastEvents = getPastRecloseEvents(df_historicalRecloses, df_validRecloses, weeks=4)\r\n    validReclosesWithPastEvents = formatPastEventsExport(validReclosesWithPastEvents)\r\n\r\n\r\n    validReclosesWithPastEvents = removeIndex(validReclosesWithPastEvents)\r\n    validReclosesWithPastEvents = formatReport_reclosesWithPastEvents(validReclosesWithPastEvents)\r\n    writeToExcel(validReclosesWithPastEvents, \"Feeder ID\", f\"{root}Valid Recloses With Past Events/ReclosesWithPastEvents_{yesterday}.xlsx\")\r\n\r\n    # Append valid recloses to historical and save file\r\n    df_historicalRecloses = df_historicalRecloses.append(df_validRecloses)\r\n\r\n    df_historicalRecloses = removeIndex(df_historicalRecloses)\r\n    df_historicalRecloses.to_csv(f\"{root}Historical Reports/historicalRecloses_{yesterday}.csv\", index=False)\r\n\r\ndef func_logger(func):\r\n\r\n\tdef inner(*args, **kwargs):\r\n\t\tlogging.info(f'Call func {func.__name__} with {args, kwargs}')\r\n\t\tret = func(*args, **kwargs)\r\n\t\tlogging.info(f'Return  func {func.__name__} with return = {ret}')\r\n\t\treturn ret\r\n\r\n\treturn inner\r\n\r\ndef is_itemInSeriesSubstring(phaseSeries, phaseList):\r\n\t# Convert each element in the series to a list of strings\r\n\tlist_of_lists = [string.split(',') for string in phaseSeries]\r\n\r\n\t# Flatten the list of lists into a single list\r\n\tflat_list = [item for sublist in list_of_lists for item in sublist]\r\n\r\n\t# Check if any of the strings in the list is equal to any of the comma delimited strings\r\n\tresult = [string in flat_list for string in phaseList]\r\n\r\n\treturn any(result)\r\n\r\n@func_logger\r\ndef formatReport_validReclosers(recloseReport):\r\n\t# Fill in placeholder columns\r\n\tfor col in [\"Lightning within 300m at time of reclose\", \"Lightning distance (m)\", \"Event missed in previous period\", 'Lightning strikes within 300m during 24 hours', 'Lightning map link']:\r\n\t\trecloseReport[col] = \"\"\r\n\r\n\t# Reorder columns\r\n\torder = ['Incident ID', 'Outage Start Time', 'Feeder ID', 'Feeder Name', 'Customers Impacted', 'Protection Device', 'Bushfire Risk Area', 'Feeder location', 'Phase / Zone', 'Average Wind Speed (kph)', 'Total Rainfall Within 4h Window (mm)', 'Lightning within 300m at time of reclose', 'Lightning distance (m)', 'Patrol level', 'Patrol level reason', 'Patrol trigger reason', 'Event missed in previous period', 'Closest Weather Station', 'Rainfall-2h (mm)', 'Rainfall-1h (mm)', 'Rainfall+0h (mm)', 'Rainfall+1h (mm)', 'Rainfall+2h (mm)', 'Weather Debug Info', 'Lightning strikes within 300m during 24 hours', 'Lightning map link', 'Outage End Time', 'Seconds Open', 'Incident Reclose Count', \"Did Sustained Outage Occur\"]\r\n\trecloseReport = recloseReport[order]\r\n\treturn recloseReport\r\n\r\n@func_logger\r\ndef formatReport_reclosesWithPastEvents(recloseReport):\r\n\t# Fill in placeholder columns\r\n\tfor col in [\"Lightning within 300m at time of reclose\", \"Lightning distance (m)\", \"Event missed in previous period\", 'Lightning strikes within 300m during 24 hours', 'Lightning map link', \"Did Sustained Outage Occur\"]:\r\n\t\trecloseReport[col] = \"\"\r\n\r\n\t# Reorder columns\r\n\torder = ['Incident ID', 'Outage Start Time', 'Feeder ID', 'Feeder Name', 'Customers Impacted', 'Protection Device', 'Bushfire Risk Area', 'Feeder location', 'Phase / Zone', 'Average Wind Speed (kph)', 'Total Rainfall Within 4h Window (mm)', 'Lightning within 300m at time of reclose', 'Patrol level', 'Patrol level reason', 'Patrol trigger reason', 'Closest Weather Station', 'Rainfall-2h (mm)', 'Rainfall-1h (mm)', 'Rainfall+0h (mm)', 'Rainfall+1h (mm)', 'Rainfall+2h (mm)', 'Weather Debug Info', 'Lightning strikes within 300m during 24 hours', 'Lightning map link', 'Outage End Time', 'Seconds Open', 'Incident Reclose Count']\r\n\trecloseReport = recloseReport[order]\r\n\treturn recloseReport\r\n\r\ndef removeIndex(df):\r\n\tif \"Unnamed: 0\" in df.columns:\r\n\t\tdf = df.drop(\"Unnamed: 0\", axis=1)\r\n\treturn df\r\n\r\ndef formatPastEventsExport(validReclosesWithPastEvents):\r\n\r\n\t# nan to blank\r\n\tvalidReclosesWithPastEvents = validReclosesWithPastEvents.fillna(\"\")\r\n\r\n\t# Sort the values\r\n\tvalidReclosesWithPastEvents = validReclosesWithPastEvents.sort_values([\"Feeder ID\", \"Outage Start Time\"])\r\n\r\n\treturn validReclosesWithPastEvents\r\n\r\ndef build_format(wb, color, bold=False, align='center', font_color='black'):\r\n\t\"\"\"\r\n\tSet formatting in excel file to be centered, bold, and have grey borders\r\n\r\n\tArgs:\r\n\t\twb(:obj:`str`): The complete path to the directory containing files\r\n\t\tcolor: accepts color value to change cell color\r\n\t\tbold: Enables text to be bold if True; default is False\r\n\t\talign: Set alignment of cell text; default is centered\r\n\t\tsci_not: Enables scientific notation if True; default is False\r\n\t\tfont_color: Sets font color; default is black\r\n\r\n\tReturns:\r\n\t\tCustomized XlsxWriter formatting template, based on user-provided parameters\r\n\t\"\"\"\r\n\t#: Format headers\r\n\tformat_x = wb.add_format({'align': align,'bold': bold, 'bg_color':color, 'font_color':font_color})\r\n\tformat_x.set_border()\r\n\tformat_x.set_border_color('#BFBFBF')\r\n\tformat_x.set_align('center')\r\n\r\n\treturn format_x\r\n\r\ndef writeToExcel(df, groupByColumnName, pathToSave):\r\n\tgroupByColumnNum = df.columns.get_loc(groupByColumnName)\r\n\twriter = pd.ExcelWriter(pathToSave, engine='xlsxwriter', datetime_format='mmm d yyyy hh:mm:ss', date_format='mmmm dd yyyy')\r\n\tdf['Outage Start Time'] =  df['Outage Start Time'].astype(str)\r\n\tdf['Outage End Time'] =  df['Outage End Time'].astype(str)\r\n\tdf.to_excel(writer, sheet_name='Sheet1', index=False)\r\n\tworkbook = writer.book\r\n\tworksheet = writer.sheets['Sheet1']\r\n\r\n\t# Define the formats\r\n\tformat1 = workbook.add_format({'bg_color': '#E5F8F3', 'border_color': '#BFBFBF', 'border': 1}) # light green 1\r\n\tformat2 = workbook.add_format({'bg_color': '#E3F5E8', 'border_color': '#BFBFBF', 'border': 1}) # light green 2\r\n\tformat3 = workbook.add_format({'bg_color': '#C7EDE0', 'border_color': '#BFBFBF', 'border': 1}) # dark green 1\r\n\tformat4 = workbook.add_format({'bg_color': '#C7ECC7', 'border_color': '#BFBFBF', 'border': 1}) # dark green 2\r\n\tformat5 = workbook.add_format({'bg_color': '#B9D3EE', 'border_color': '#BFBFBF', 'border': 1}) # dark blue\r\n\tformat6 = workbook.add_format({'bg_color': '#DBE8F0', 'border_color': '#BFBFBF', 'border': 1}) # light blue\r\n\r\n\t# Set the color for the starting row\r\n\tcurrent_color = 'Dark'\r\n\r\n\t# Define a function to format a single row\r\n\tdef format_row(row, color=current_color):\r\n\t\tif color == 'Dark':\r\n\t\t\tfor column in range(0,len(df.columns)): # format the first 2 columns\r\n\t\t\t\tworksheet.write(row, column, df.iloc[row-1, column], format5)\r\n\t\telif color == 'Light':\r\n\t\t\tfor column in range(0,len(df.columns)): # format the first 2 columns\r\n\t\t\t\tworksheet.write(row, column, df.iloc[row-1, column], format6)\r\n\r\n\t# Format the 1st row\r\n\tformat_row(1)\r\n\r\n\t# Start formatting from the 2nd row until the end of the df\r\n\tfor row in range(2, df.shape[0]+1):\r\n\t\t# if the id of the row is the same as the id of the previous row\r\n\t\tif df.iloc[row-1, groupByColumnNum] == df.iloc[row-2,groupByColumnNum]:\r\n\t\t\tformat_row(row, color=current_color)\r\n\t\t# if it's different than that of the previous row switch the colors\r\n\t\telse:\r\n\t\t\tif current_color == 'Dark':\r\n\t\t\t\tcurrent_color = 'Light'\r\n\t\t\telif current_color == 'Light':\r\n\t\t\t\tcurrent_color = 'Dark'\r\n\t\t\tformat_row(row, color=current_color)\r\n\r\n\t# Set the columns width\r\n\tworksheet.set_column('A:AZ', len(df.columns))\r\n\r\n\t# Dynamically Adjust column widths\r\n\tfor column in df:\r\n\t\tcolumn_length = max(df[column].astype(str).map(len).max(), len(column))\r\n\t\tcol_idx = df.columns.get_loc(column)\r\n\t\twriter.sheets['Sheet1'].set_column(col_idx, col_idx, column_length)\r\n\r\n\twriter.save()\r\n\r\n# Get the last x weeks of reclose events, for reporting purposes\r\ndef getPastRecloseEvents(df_historicalRecloses, df_validRecloses, weeks=4):\r\n\tfourWeeks_prior_yesterday =  yesterday - timedelta(weeks=weeks)\r\n\tdf_reclosesLast4weeks_yesterday = df_historicalRecloses[(df_historicalRecloses[\"Outage End Time\"].dt.date >= fourWeeks_prior_yesterday)]\r\n\t# Filter last 4 weeks recloses by protection device\r\n\tdf_reclosesLast4weeks_yesterday = df_reclosesLast4weeks_yesterday[df_reclosesLast4weeks_yesterday[\"Protection Device\"].isin(df_validRecloses[\"Protection Device\"])] \r\n\tdf_reclosesLast4weeks_yesterday = df_reclosesLast4weeks_yesterday.append(df_validRecloses)\r\n\tdf_reclosesLast4weeks_yesterday = df_reclosesLast4weeks_yesterday.sort_values([\"Outage Start Time\", \"Protection Device\" ])\r\n\treturn df_reclosesLast4weeks_yesterday\r\n\r\n# you can add additional helper methods below.\r\ndef get_PatrolLevel(deviceID, df_reclosesLast4weeks):\r\n\r\n\t# We add 1 to each count as we include the currently observered reclose\r\n\tnumber_recloses4Weeks = sum(df_reclosesLast4weeks[\"Protection Device\"].str.count(deviceID)) + 1\r\n\r\n\tif number_recloses4Weeks < 4:\r\n\t\treason = f\"{number_recloses4Weeks} reclose(s) in last 4 weeks\"\r\n\t\treturn number_recloses4Weeks, reason\r\n\tif number_recloses4Weeks >= 4:\r\n\t\treason = f\"{number_recloses4Weeks} recloses in last 4 weeks\"\r\n\t\treturn 4, reason\r\n\r\n# Used for debugging offline\r\ndef set_yesterday(yesterdayIN):\r\n  global yesterday\r\n  yesterday = yesterdayIN\r\n  return"
  results:
    - SUCCESS
