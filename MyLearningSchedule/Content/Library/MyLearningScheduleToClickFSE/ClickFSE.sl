namespace: MyLearningScheduleToClickFSE
operation:
  name: ClickFSE
  inputs:
    - username
    - password:
        sensitive: false
    - trainingTime
    - employeeID
    - training
    - travelTimes
    - currentRow
    - fileName
    - environment
  python_action:
    use_jython: false
    script: "def execute(username,password,trainingTime,employeeID,training,travelTimes,currentRow,fileName,environment): \r\n    import requests\r\n    from base64 import b64encode\r\n    from openpyxl import load_workbook\r\n    import pandas as pd  \r\n    \r\n    if environment == \"prod\":\r\n        clickURL = \"https://fse-anz-int01.cloud.clicksoftware.com\"\r\n    elif environment == \"qas\":\r\n        clickURL = \"https://fse-anz-sb-int01.cloud.clicksoftware.com\"\r\n    \r\n    pd_xl_file = pd.ExcelFile(fileName)\r\n    df = pd_xl_file.parse(\"Sheet 1\")\r\n    count = df.shape\r\n    rowCount = count[0]\r\n    \r\n    error = \"\"\r\n    \r\n    wb = load_workbook(filename=fileName,read_only=False)\r\n    ws = wb.active\r\n    \r\n    #get domain\r\n    url = clickURL+\"/so/api/objects/Engineer/?$filter=(contains(ID,'\"+employeeID+\"'))&$select=Name,ID,District\"\r\n    payload  = {}\r\n    userAndPass = b64encode(bytes(username+':'+password,\"utf-8\")).decode(\"ascii\")\r\n    headers = { 'Authorization' : 'Basic %s' %  userAndPass}\r\n    response1 = requests.request(\"GET\", url, headers=headers, data = payload)\r\n    result = \"\"\r\n    travel = \"Travel Time\"\r\n    if response1.text != \"[]\":\r\n        district = response1.text\r\n        district = district.split('\"@DisplayString\": \"')\r\n        if len(district) == 3:\r\n            xyz = district[0]\r\n            domain = district[1]\r\n            xyz = district[2]\r\n        else:\r\n            xyz = district[0]\r\n            domain = district[1]\r\n        district, abc = domain.split('\"\\r\\n',1)\r\n        if response1.status_code >= 200 and response1.status_code < 300:\r\n            #update schedule\r\n            trainingTime = trainingTime.split(\",\")\r\n            travelingTime = travelTimes.split(\",\")\r\n            loop = 0\r\n            for x in trainingTime:\r\n                y = travelingTime[loop]\r\n                startTime,finishTime = x.split(\"/\")\r\n                travelToTime,travelFromTime = y.split(\"/\")\r\n                \r\n                #TRAVEL TO TIME\r\n                if travelToTime != startTime:\r\n                    errorCheck = 0\r\n                    while errorCheck < 3:\r\n                        url = clickURL+\"/so/api/objects/Assignment\"\r\n                        payload = \"{\\r\\n    \\\"@objectType\\\": \\\"Assignment\\\",\\r\\n    \\\"@createOrUpdate\\\": true,\\r\\n    \\\"Start\\\":\\\" \"+travelToTime+\"\\\",\\r\\n    \\\"Finish\\\":\\\" \"+startTime+\"\\\",\\r\\n    \\\"Engineers\\\": [\\r\\n        {\\r\\n            \\\"ID\\\": \\\"\"+employeeID+\"\\\",\\r\\n            \\\"District\\\": {\\r\\n                \\\"Name\\\": \\\"\"+district+\"\\\"\\r\\n            }\\r\\n        }\\r\\n    ],\\r\\n    \\\"Comment\\\": \\\"\"+travel+\"\\\",\\r\\n    \\\"NonAvailabilityType\\\": {\\r\\n        \\\"Name\\\": \\\"TRV\\\"\\r\\n    }\\r\\n}\"\r\n                        userAndPass = b64encode(bytes(username+':'+password,\"utf-8\")).decode(\"ascii\")\r\n                        headers = { 'Authorization' : 'Basic %s' %  userAndPass,'Content-Type': 'application/json' }\r\n                        response = requests.request(\"POST\", url, headers=headers, data = payload.encode('utf-8'))\r\n                        if response.status_code >= 200 and response.status_code < 300:\r\n                            error = \"no error: \" + response.reason\r\n                            ws[\"T\"+str(currentRow)].value = error\r\n                            break\r\n                        else:\r\n                            errorCheck += 1\r\n                            err = ws[\"T\"+str(currentRow)].value\r\n                            error = err + \"error occurred when applying travel to time: (attempt \"+ errorCheck +\") \" + response.reason + \", \"\r\n                            ws[\"T\"+str(currentRow)].value = error\r\n                else:\r\n                    error = \"no travel time\"\r\n                    ws[\"T\"+str(currentRow)].value = error\r\n                #TRAINING TIME\r\n                errorCheck = 0\r\n                while errorCheck < 3:\r\n                    url = clickURL+\"/so/api/objects/Assignment\"\r\n                    payload = \"{\\r\\n    \\\"@objectType\\\": \\\"Assignment\\\",\\r\\n    \\\"@createOrUpdate\\\": true,\\r\\n    \\\"Start\\\":\\\" \"+startTime+\"\\\",\\r\\n    \\\"Finish\\\":\\\" \"+finishTime+\"\\\",\\r\\n    \\\"Engineers\\\": [\\r\\n        {\\r\\n            \\\"ID\\\": \\\"\"+employeeID+\"\\\",\\r\\n            \\\"District\\\": {\\r\\n                \\\"Name\\\": \\\"\"+district+\"\\\"\\r\\n            }\\r\\n        }\\r\\n    ],\\r\\n    \\\"Comment\\\": \\\"\"+training+\"\\\",\\r\\n    \\\"NonAvailabilityType\\\": {\\r\\n        \\\"Name\\\": \\\"TRG\\\"\\r\\n    }\\r\\n}\"\r\n                    userAndPass = b64encode(bytes(username+':'+password,\"utf-8\")).decode(\"ascii\")\r\n                    headers = { 'Authorization' : 'Basic %s' %  userAndPass,'Content-Type': 'application/json' }\r\n                    response = requests.request(\"POST\", url, headers=headers, data = payload.encode('utf-8'))\r\n                    if response.status_code >= 200 and response.status_code < 300:\r\n                        error = \"no error: \" + response.reason\r\n                        ws[\"U\"+str(currentRow)].value = error\r\n                        break\r\n                    else:\r\n                        errorCheck += 1\r\n                        err = ws[\"U\"+str(currentRow)].value\r\n                        error = err + \"error occurred when applying training time: (attempt \"+ errorCheck +\") \" + response.reason + \", \"\r\n                        ws[\"U\"+str(currentRow)].value = error\r\n                        \r\n                #TRAVEL FROM TIME\r\n                if travelFromTime != finishTime:\r\n                    errorCheck = 0\r\n                    while errorCheck < 3:\r\n                        url = clickURL+\"/so/api/objects/Assignment\" \r\n                        payload = \"{\\r\\n    \\\"@objectType\\\": \\\"Assignment\\\",\\r\\n    \\\"@createOrUpdate\\\": true,\\r\\n    \\\"Start\\\":\\\" \"+finishTime+\"\\\",\\r\\n    \\\"Finish\\\":\\\" \"+travelFromTime+\"\\\",\\r\\n    \\\"Engineers\\\": [\\r\\n        {\\r\\n            \\\"ID\\\": \\\"\"+employeeID+\"\\\",\\r\\n            \\\"District\\\": {\\r\\n                \\\"Name\\\": \\\"\"+district+\"\\\"\\r\\n            }\\r\\n        }\\r\\n    ],\\r\\n    \\\"Comment\\\": \\\"\"+travel+\"\\\",\\r\\n    \\\"NonAvailabilityType\\\": {\\r\\n        \\\"Name\\\": \\\"TRV\\\"\\r\\n    }\\r\\n}\"\r\n                        userAndPass = b64encode(bytes(username+':'+password,\"utf-8\")).decode(\"ascii\")\r\n                        headers = { 'Authorization' : 'Basic %s' %  userAndPass,'Content-Type': 'application/json' }\r\n                        response = requests.request(\"POST\", url, headers=headers, data = payload.encode('utf-8'))\r\n                        if response.status_code >= 200 and response.status_code < 300:\r\n                            error = \"no error: \" + response.reason\r\n                            ws[\"V\"+str(currentRow)].value = error \r\n                            break\r\n                        else:\r\n                            errorCheck += 1\r\n                            err = ws[\"V\"+str(currentRow)].value\r\n                            error = err + \"error occurred when applying travel from time: (attempt \"+ errorCheck +\") \" + response.reason + \", \"\r\n                            ws[\"V\"+str(currentRow)].value = error\r\n                else:\r\n                    error = \"no travel time\"\r\n                    ws[\"V\"+str(currentRow)].value = error\r\n                loop = loop + 1\r\n        else:\r\n            error = \"error occurred when retrieving domain\"\r\n            ws[\"T\"+str(currentRow)].value = error\r\n    else:\r\n        error = \"error occurred when retrieving domain\"\r\n        ws[\"T\"+str(currentRow)].value = error\r\n    wb.save(fileName)\r\n    wb.close()\r\n    \r\n    return{\"error\":error}"
  outputs:
    - error
  results:
    - SUCCESS
