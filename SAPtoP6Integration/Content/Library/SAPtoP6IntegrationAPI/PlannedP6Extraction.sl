namespace: SAPtoP6IntegrationAPI
operation:
  name: PlannedP6Extraction
  inputs:
    - P6ServiceAccountUsername:
        sensitive: true
    - P6ServiceAccountPassword:
        sensitive: true
    - FilePath: 'C:/Users/svcrpabot/OneDrive - SA Power Networks/SAP to P6 Integration/'
    - ProjectInput
    - Environment
  python_action:
    use_jython: false
    script: "def execute(P6ServiceAccountUsername, P6ServiceAccountPassword, FilePath, ProjectInput, Environment):\r\n    import requests\r\n    import datetime\r\n    import random\r\n    import xmltodict\r\n    import pandas as pd\r\n    \r\n    #This script gets the primavera planned activities and resource assignments.\r\n    #Inputs: Authentication username and password, \r\n    #Outputs: activities, and excel file\r\n    \r\n    #Used to generate the nonce and created/expired times for authentication in the request\r\n    #Needs to be generated for every request\r\n    def authBody(body):\r\n       random_string = ''\r\n       for _ in range(22):\r\n          # Considering only upper and lowercase letters\r\n          random_integer = random.randint(97, 97 + 26 - 1)\r\n          flip_bit = random.randint(0, 1)\r\n          # Convert to lowercase if the flip bit is on\r\n          random_integer = random_integer - 32 if flip_bit == 1 else random_integer\r\n          # Keep appending random characters using chr(x)\r\n          random_string += (chr(random_integer))\r\n    \r\n       created = datetime.datetime.utcnow()\r\n       expired = created + datetime.timedelta(seconds= 5*60)\r\n       data = f\"\"\"\r\n        <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n            <soap-env:Header>\r\n                <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\r\n                <wsu:Timestamp>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                    <wsu:Expires>{expired.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\r\n                </wsu:Timestamp>\r\n                <wsse:UsernameToken>\r\n                    <wsse:Username>{UserName}</wsse:Username>\r\n                    <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\r\n                    <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{random_string}==</wsse:Nonce>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                </wsse:UsernameToken>\r\n                </wsse:Security>\r\n            </soap-env:Header>\r\n            <soap-env:Body>\r\n                {body}\r\n            </soap-env:Body>\r\n        </soap-env:Envelope>\r\n        \"\"\"\r\n       return(data)\r\n    \r\n    #Function to return endpoint URL based on environment\r\n    def serviceURL(service):\r\n        if Environment == \"QAS\":\r\n            endpoint = f\"http://prvqas612:8206/p6ws/services/{service}?wsdl\"\r\n        else:\r\n            endpoint = f\"http://prvprd612:8206/p6ws/services/{service}?wsdl\"\r\n        return(endpoint)\r\n    \r\n    #Validate projects, return False if any of projects have 'Run Actuals' Code\r\n    def projectValidation(projectidsstring, ProjectsFilePath):\r\n        notValidatedProjects = ''\r\n        url = serviceURL(\"ProjectCodeAssignmentService\")\r\n        body = f\"\"\"\r\n            <ns0:ReadProjectCodeAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ProjectCodeAssignment/V1\">\r\n                <ns0:Field>ProjectObjectId</ns0:Field>\r\n                <ns0:Field>ProjectCodeDescription</ns0:Field>\r\n                <ns0:Field>ProjectId</ns0:Field>\r\n                <ns0:Field>ProjectCodeObjectId</ns0:Field>\r\n                <ns0:Field>ProjectCodeValue</ns0:Field>\r\n                <ns0:Field>ProjectCodeTypeName</ns0:Field>\r\n                <ns0:Filter>ProjectId IN ({projectidsstring}) AND ProjectCodeTypeName = 'FS - Run Actuals' AND ProjectCodeValue = 'Run Actuals'</ns0:Filter>\r\n            </ns0:ReadProjectCodeAssignments>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        #set up dictionary of key = project id, value  = validation (true or false)\r\n        listOfProjectIDs = projectidsstring.replace(\"'\",\"\").split(',')\r\n        dictOfProjects = { i : True for i in listOfProjectIDs }\r\n        try:\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadProjectCodeAssignmentsResponse']['ProjectCodeAssignment']\r\n        except KeyError:\r\n            #If there is no projects returned here that means all projects are ok to run so it outputs to a dataframe and returns original string\r\n            #add the output to data frame and to excel here\r\n            ValidatedDF = pd.DataFrame(dictOfProjects.items(), columns=['Project ID', 'Validation'])\r\n            #Output Activities to excel\r\n            ValidatedDF.to_excel(ProjectsFilePath, index=False)\r\n            return(projectidsstring,notValidatedProjects)\r\n        if type(x) is dict:\r\n            x = [x]\r\n        #Iterates through projects returned and sets validation to false (meaning they have the run actuals code)\r\n        for i in x:\r\n            dictOfProjects[i['ProjectId']] = False\r\n        ValidatedDF = pd.DataFrame(dictOfProjects.items(), columns=['Project ID', 'Validation'])\r\n        #Output projects to excel\r\n        ValidatedDF.to_excel(ProjectsFilePath, index=False)\r\n        projectidsstring = ''\r\n        notValidatedProjects = ''\r\n        #Iterates through projects and if validation is true it runs the automation on those projects ignoreing others\r\n        for i in dictOfProjects:\r\n            if dictOfProjects[i] == True:\r\n                if projectidsstring == '':\r\n                    projectidsstring = \"'\"+i+\"'\"\r\n                else:\r\n                    projectidsstring = projectidsstring+\",'\"+i+\"'\"\r\n            else:\r\n                if notValidatedProjects == '':\r\n                    notValidatedProjects = i\r\n                else:\r\n                    notValidatedProjects = notValidatedProjects+\",\"+i+\"\"\r\n        return(projectidsstring,notValidatedProjects)\r\n    \r\n    #Takes the string input of validated projects and returns the P6 object ID, SAP project name and startdate of project\r\n    def getProjectIDs(projectidsstring):\r\n        url = serviceURL(\"ProjectService\")\r\n        body = f\"\"\"\r\n             <ns0:ReadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Project/V2\">\r\n                   <ns0:Field>Name</ns0:Field>\r\n                   <ns0:Field>StartDate</ns0:Field>\r\n                   <ns0:Field>ObjectId</ns0:Field>\r\n                   <ns0:Field>Id</ns0:Field>\r\n                   <ns0:Filter>Id IN ({projectidsstring})</ns0:Filter>\r\n             </ns0:ReadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadProjectsResponse']['Project']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        Projects = {}\r\n        for i in x:\r\n            Projects[i['ObjectId']] = {}\r\n            Projects[i['ObjectId']]['ProjectSAPID'] = i['Id']\r\n            Projects[i['ObjectId']]['ProjectID'] = i['ObjectId']\r\n        return(Projects)\r\n    \r\n    #This function takes the project object ID's and finds activities that have a FS order number, these get returned as a dictionary\r\n    def getFSOrderNum(ProjectsDict):\r\n        ProjectStringUDF = \"\"\r\n        for i in ProjectsDict:\r\n            if ProjectStringUDF == \"\":\r\n                ProjectStringUDF = i\r\n            else:\r\n                ProjectStringUDF = ProjectStringUDF+ \",\" + i\r\n        url = serviceURL(\"UDFValueService\")\r\n        body = f\"\"\"\r\n             <ns0:ReadUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                   <ns0:Field>UDFTypeTitle</ns0:Field>\r\n                   <ns0:Field>CodeValue</ns0:Field>\r\n                   <ns0:Field>Text</ns0:Field>\r\n                   <ns0:Field>Integer</ns0:Field>\r\n                   <ns0:Field>Text</ns0:Field>\r\n                   <ns0:Field>ProjectObjectId</ns0:Field>\r\n                   <ns0:Field>ForeignObjectId</ns0:Field>\r\n                   <ns0:Filter>ProjectObjectId IN ({ProjectStringUDF}) AND UDFTypeTitle IN ('FS - Order Number') AND UDFTypeSubjectArea = 'Activity'</ns0:Filter>\r\n             </ns0:ReadUDFValues>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        try:\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadUDFValuesResponse']['UDFValue']\r\n        except KeyError:\r\n            return(Activities)\r\n        if type(x) is dict:\r\n            x = [x]\r\n        Activities = {}\r\n        for i in x:\r\n            if i['UDFTypeTitle'] == 'FS - Order Number':\r\n                Activities.update({i['ForeignObjectId']: {\r\n                                'FSOrderNumber': i['Text'], 'ProjectObjectID': i['ProjectObjectId']}})\r\n        return(Activities)\r\n    \r\n    #Takes an input of a dictionary of activities with FS order numbers and adds the other relevant activitiy details to the dictionary\r\n    def updateActivitesDetails(activites):\r\n        url = serviceURL(\"ActivityService\")\r\n        # create Activity ID string\r\n        list = []\r\n        for i in activites:\r\n            list.append(i)\r\n        #This is to break the requests as the api has a limit of 1000 filters in the request\r\n        for i in range(0, len(list), 950):\r\n            activityIDS = ''\r\n            for b in list[i:i+950]:\r\n                if activityIDS == '':\r\n                    activityIDS = \"'\"+b+\"'\"\r\n                else:\r\n                    activityIDS = activityIDS+\", '\"+b+\"'\"\r\n            body = f\"\"\"\r\n                <ns0:ReadActivities xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1\">\r\n                      <ns0:Field>ObjectId</ns0:Field>\r\n                      <ns0:Field>ActualStartDate</ns0:Field>\r\n                      <ns0:Field>Status</ns0:Field>\r\n                      <ns0:Field>Name</ns0:Field>\r\n                      <ns0:Filter>ObjectId IN ({activityIDS})</ns0:Filter>\r\n                </ns0:ReadActivities>\r\n            \"\"\"\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadActivitiesResponse']['Activity']\r\n            if type(x) is dict:\r\n                x = [x]\r\n            for i in x:\r\n                activites[i['ObjectId']]['StartDate'] = i['ActualStartDate']\r\n                activites[i['ObjectId']]['Status'] = i['Status']\r\n                activites[i['ObjectId']]['Activity Name'] = i['Name']\r\n        return(activites)\r\n    \r\n    #This function takes the activities with FS order numbers and gets the fs estimates $ + hrs\r\n    def getexistingfsvalues(Activities):\r\n        url = serviceURL(\"UDFValueService\")\r\n        activityString = \"\"\r\n        #Build string however also adds nulls for the fs estimate hours as these are not always expected\r\n        for i in Activities:\r\n            Activities[i]['FSEstimate$P6']= ''\r\n            Activities[i]['FSEstimateHrsP6']= ''\r\n            if activityString == '':\r\n                activityString = \"'\"+i+\"'\"\r\n            else:\r\n                activityString = activityString+\", '\"+i+\"'\"\r\n        body = f\"\"\"\r\n             <ns0:ReadUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                   <ns0:Field>UDFTypeTitle</ns0:Field>\r\n                   <ns0:Field>CodeValue</ns0:Field>\r\n                   <ns0:Field>Text</ns0:Field>\r\n                   <ns0:Field>Cost</ns0:Field>\r\n                   <ns0:Field>Integer</ns0:Field>\r\n                   <ns0:Field>Text</ns0:Field>\r\n                   <ns0:Field>ProjectObjectId</ns0:Field>\r\n                   <ns0:Field>ForeignObjectId</ns0:Field>\r\n                   <ns0:Filter>ForeignObjectId IN ({activityString}) AND UDFTypeTitle IN ('FS - Estimate (hrs)', 'FS - Estimate ($)') AND UDFTypeSubjectArea = 'Activity'</ns0:Filter>\r\n             </ns0:ReadUDFValues>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        try:\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadUDFValuesResponse']['UDFValue']\r\n        except KeyError:\r\n            return(Activities)\r\n        if type(x) is dict:\r\n            x = [x]\r\n        for i in x:\r\n            if i['UDFTypeTitle'] == 'FS - Estimate ($)':\r\n                Activities[i['ForeignObjectId']]['FSEstimate$P6']= i['Cost']\r\n            if i['UDFTypeTitle'] == 'FS - Estimate (hrs)':\r\n                Activities[i['ForeignObjectId']]['FSEstimateHrsP6']= i['Integer']\r\n        return(Activities)\r\n    \r\n    #Gets the resource assignments for activities passed\r\n    def getActivityAssignments(projectActivities):\r\n        url = serviceURL(\"ResourceAssignmentService\")\r\n        resourceAssignments = pd.DataFrame()\r\n        ActivityList = []\r\n        for index, row in projectActivities.iterrows():\r\n            ActivityList.append(row['ActivityID'])\r\n        #Breaks the request up incase over 1000 Activities\r\n        for i in range(0, len(ActivityList), 950):\r\n            activityIDS = ''\r\n            for b in ActivityList[i:i+950]:\r\n                if activityIDS == '':\r\n                    activityIDS = b\r\n                else:\r\n                    activityIDS = activityIDS+\", \"+b\r\n            body = f\"\"\"\r\n                <ns0:ReadResourceAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ResourceAssignment/V1\">\r\n                   <ns0:Field>ResourceName</ns0:Field>\r\n                   <ns0:Field>ResourceObjectId</ns0:Field>\r\n                   <ns0:Field>RoleName</ns0:Field>\r\n                   <ns0:Field>ObjectId</ns0:Field>\r\n                   <ns0:Field>ActualDuration</ns0:Field>\r\n                   <ns0:Field>ActualRegularCost</ns0:Field>\r\n                   <ns0:Field>PlannedCost</ns0:Field>\r\n                   <ns0:Field>PlannedDuration</ns0:Field>\r\n                   <ns0:Field>IsCostUnitsLinked</ns0:Field>\r\n                   <ns0:Field>ActivityObjectId</ns0:Field>\r\n                   <ns0:Field>ResourceId</ns0:Field>\r\n                   <ns0:Filter>ActivityObjectId IN ({activityIDS})</ns0:Filter>\r\n             </ns0:ReadResourceAssignments>\r\n             \"\"\"\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadResourceAssignmentsResponse']['ResourceAssignment']\r\n            if type(x) is dict:\r\n                x = [x]\r\n            for i in x:\r\n                curAssignment = {'ActivityID': i['ActivityObjectId'], 'AssignmentObjectID': i['ObjectId'], 'Planned Cost': i['PlannedCost'], 'Planned Duration': i['PlannedDuration'], 'ResourceObjectId': i['ResourceObjectId'],\r\n                                 'Resource Name': i['ResourceName'], 'Role Name': i['RoleName'], 'EmployeeID': i['ResourceId'], 'IsCostsUnitsLinked': i['IsCostUnitsLinked'], 'SAP Planned Cost': '', 'SAP Planned Hours': '', 'Email Content': ''}\r\n                df = pd.DataFrame(curAssignment, index=[0])\r\n                resourceAssignments = resourceAssignments.append(\r\n                    df, ignore_index=True)\r\n        return(resourceAssignments)\r\n    \r\n    \r\n    ###Main Script###\r\n    #Input variables update for P6\r\n    #Username /Password\r\n    UserName = P6ServiceAccountUsername\r\n    Password = P6ServiceAccountPassword\r\n\r\n    \r\n    #Clean string input\r\n    i = ProjectInput\r\n    i = i.upper().replace(\" \", '')\r\n    ProjectString = ''\r\n    i = i.split(',')\r\n    for o in i:\r\n        if len(o) == 9:\r\n            if ProjectString == '':\r\n                ProjectString = \"'\" + o + \"'\"\r\n            else:\r\n                ProjectString = ProjectString + \",'\"+o+\"'\"\r\n    \r\n    # Checks projects for run actuals code, returns false if theres a match, true if not\r\n    #if projectValidation(ProjectString) is False:\r\n        # Set error variable\r\n        #exit()\r\n    #Setup projects filepath\r\n    d1 = datetime.datetime.now().strftime(\"%d_%m_%Y-%H%M\")\r\n    ProjectsFileName = d1 + ' PlannedProjects.xlsx'\r\n    ProjectsFilePath = FilePath + ProjectsFileName\r\n\r\n    # Checks projects for run actuals code, returns false if theres a match, true if not\r\n    ProjectString,NotValidatedProjects = projectValidation(ProjectString, ProjectsFilePath)        \r\n    \r\n    if NotValidatedProjects != '' and ProjectString == '':\r\n        Check = 'all projects not validated'\r\n    elif NotValidatedProjects != '' and ProjectString != '':\r\n        Check = 'some projects not validated'\r\n    else:\r\n        Check = 'all projects validated'\r\n\r\n    if Check != 'all projects not validated' :\r\n        #Get P6 Project ID's\r\n        Projects = getProjectIDs(ProjectString)\r\n    \r\n        #Get Activities with FS order numbers\r\n        Activities = getFSOrderNum(Projects)\r\n        \r\n        #Update Activities with extra details\r\n        Activities = updateActivitesDetails(Activities)\r\n        \r\n        #Update Activities with FS estimate hours and costs for activities\r\n        Activities = getexistingfsvalues(Activities)\r\n        \r\n        #Convert Activities to a dataframe\r\n        projectActivities = pd.DataFrame()\r\n        for i in Activities:\r\n            try:\r\n                curActivity = {'ActivityID': i, 'ActivityName': Activities[i]['Activity Name'], 'StartDate': Activities[i]['StartDate'], 'ProjectObjectID': Activities[i]['ProjectObjectID'],\r\n                               'FSOrderNumber': Activities[i]['FSOrderNumber'], 'Status': Activities[i]['Status'], 'ProjectName': Projects[Activities[i]['ProjectObjectID']]['ProjectSAPID'], \r\n                               'FSEstimate$P6': Activities[i]['FSEstimate$P6'], 'FSEstimateHrsP6': Activities[i]['FSEstimateHrsP6'], 'FSEstimate$SAP' : '', 'FSEstimateHrsSAP' : '', 'Email Content':''}\r\n                df = pd.DataFrame(curActivity, index=[0])\r\n                projectActivities = projectActivities.append(df, ignore_index=True)\r\n            except KeyError:\r\n                # do nothing\r\n                curActivity = {}\r\n        \r\n        #Setup file path for excel\r\n        #d1 = datetime.datetime.now().strftime(\"%d_%m_%Y-%H%M\")\r\n        ActivitiesFileName = d1 + ' PlannedActivities.xlsx'\r\n        ResourcesFileName = d1 + ' PlannedResources.xlsx'\r\n        ActivitiesFilePath = FilePath + ActivitiesFileName\r\n        ResourcesFilePath = FilePath + ResourcesFileName\r\n        \r\n        #Output Activities to excel\r\n        projectActivities.to_excel(ActivitiesFilePath, index=False)\r\n        \r\n        #Get resource assignments for Activities\r\n        resourceAssignments = getActivityAssignments(projectActivities)\r\n        \r\n        #Output Resource Assignments to excel\r\n        resourceAssignments.to_excel(ResourcesFilePath, index=False)\r\n    \r\n    return{'ActivitiesFileName':ActivitiesFileName,'ActivitiesFilePath':ActivitiesFilePath,'ResourcesFileName':ResourcesFileName,'ResourcesFilePath':ResourcesFilePath,'ProjectsFileName':ProjectsFileName,'ProjectsFilePath':ProjectsFilePath,'NotValidatedProjects':NotValidatedProjects,'ValidatedProjects':ProjectString,'Check':Check}"
  outputs:
    - ActivitiesFileName
    - ResourcesFileName
    - ProjectsFileName
    - ActivitiesFilePath
    - ResourcesFilePath
    - ProjectsFilePath
    - NotValidatedProjects
    - Check
    - ValidatedProjects
  results:
    - NOPROJECTS: "${Check == 'all projects not validated'}"
    - SOMEPROJECTS: "${Check == 'some projects not validated'}"
    - SUCCESS
