namespace: SAPtoP6IntegrationAPI
operation:
  name: ActualsP6Update
  inputs:
    - P6ServiceAccountUsername:
        sensitive: true
    - P6ServiceAccountPassword:
        sensitive: true
    - ActualsActivitiesFileName
    - ActualsResourcesFileName
    - Environment
    - FilePath: 'C:/Users/svcrpabot/OneDrive - SA Power Networks/SAP to P6 Integration/'
  python_action:
    use_jython: false
    script: "def execute(P6ServiceAccountUsername, P6ServiceAccountPassword, ActualsActivitiesFileName, ActualsResourcesFileName, Environment, FilePath):\r\n    import requests\r\n    import datetime\r\n    import random\r\n    import xmltodict\r\n    import pandas as pd\r\n    \r\n    #This script updates the primavera planned activities and resource assignments.\r\n    #Inputs: Authentication username and password, Extraction from SAP with updated details\r\n    #Outputs: NA\r\n    #TLDR: Updates the activities fs estimate hours + $\r\n    # - Updates material, service, labour planned estimates (resources assignments for activities)\r\n    \r\n    #Creating the Updated file name outside the function as it was getting lost \r\n    actualFile = ActualsResourcesFileName.split(\".\") \r\n    UpdatedActivitiesFileName = actualFile[0] + \"Updated.\" + actualFile[1]\r\n    \r\n    #Username /Password\r\n    UserName = P6ServiceAccountUsername\r\n    Password = P6ServiceAccountPassword\r\n    \r\n    #Used to generate the nonce and created/expired times for authentication in the request\r\n    #Needs to be generated for every request\r\n    def authBody(body):\r\n        random_string = ''\r\n        for _ in range(22):\r\n            # Considering only upper and lowercase letters\r\n            random_integer = random.randint(97, 97 + 26 - 1)\r\n            flip_bit = random.randint(0, 1)\r\n            # Convert to lowercase if the flip bit is on\r\n            random_integer = random_integer - 32 if flip_bit == 1 else random_integer\r\n            # Keep appending random characters using chr(x)\r\n            random_string += (chr(random_integer))\r\n    \r\n        created = datetime.datetime.utcnow()\r\n        expired = created + datetime.timedelta(seconds= 5*60)\r\n        data = f\"\"\"\r\n        <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n            <soap-env:Header>\r\n                <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\r\n                <wsu:Timestamp>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                    <wsu:Expires>{expired.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\r\n                </wsu:Timestamp>\r\n                <wsse:UsernameToken>\r\n                    <wsse:Username>{UserName}</wsse:Username>\r\n                    <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\r\n                    <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{random_string}==</wsse:Nonce>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                </wsse:UsernameToken>\r\n                </wsse:Security>\r\n            </soap-env:Header>\r\n            <soap-env:Body>\r\n                {body}\r\n            </soap-env:Body>\r\n        </soap-env:Envelope>\r\n        \"\"\"\r\n        return(data)\r\n    \r\n    #Function to return endpoint URL based on environment\r\n    def serviceURL(service):\r\n        if Environment == \"QAS\":\r\n            endpoint = f\"http://prvqas612:8206/p6ws/services/{service}?wsdl\"\r\n        else:\r\n            endpoint = f\"http://prvprd612:8206/p6ws/services/{service}?wsdl\"\r\n        return(endpoint)\r\n    \r\n    #Updates user defined field at the activity level i.e. fs estimate hrs, fs estimate ($)\r\n    def updateFSActuals(Activites):\r\n        url = serviceURL(\"UDFValueService\")\r\n        #QAS and PRD have different code values, once PRD codes found update the if to reflect PRD codes\r\n        if Environment == \"QAS\":\r\n            FSActualsdollarcode = \"1059\"\r\n            FSActualshrscode = \"1058\"\r\n            FSActualcostDataType = \"Text\"\r\n        elif Environment == \"PRD\":\r\n            FSActualsdollarcode = \"1061\"\r\n            FSActualshrscode = \"1058\"\r\n            FSActualcostDataType = \"Cost\"\r\n        ActivitiesToUpdate = []\r\n        for i in Activites:\r\n            #Compare original p6 value to sap value, if different at the update operation to the request body\r\n            if i['FSActual$P6'] != i['FSActual$SAP'] and pd.isna(i['FSActual$SAP']) == False:\r\n                if pd.isna(i['FSActual$P6']) == False:\r\n                    ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:UDFValue>\r\n                            <ns0:UDFTypeObjectId>{FSActualsdollarcode}</ns0:UDFTypeObjectId>\r\n                            <ns0:ForeignObjectId>{int(i['ActivityID'])}</ns0:ForeignObjectId>\r\n                            <ns0:{FSActualcostDataType}>{float(i['FSActual$SAP'])}</ns0:{FSActualcostDataType}>\r\n                        </ns0:UDFValue>\r\n                        \"\"\")\r\n            if i['FSActualHrsP6'] != i['FSActualHrsSAP'] and pd.isna(i['FSActualHrsSAP']) == False:\r\n                if pd.isna(i['FSActualHrsP6']) == False:\r\n                    ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:UDFValue>\r\n                            <ns0:UDFTypeObjectId>{FSActualshrscode}</ns0:UDFTypeObjectId>\r\n                            <ns0:ForeignObjectId>{i['ActivityID']}</ns0:ForeignObjectId>\r\n                            <ns0:Text>{i['FSActualHrsSAP']}</ns0:Text>\r\n                        </ns0:UDFValue>\r\n                        \"\"\")\r\n        if ActivitiesToUpdate == []:\r\n            return(True)\r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(ActivitiesToUpdate), 950):\r\n            #print(list[i:i+950])\r\n            #print(i)\r\n            body = ''\r\n            for b in ActivitiesToUpdate[i:i+950]:\r\n                body = body+b\r\n            body = f\"\"\"\r\n                <ns0:UpdateUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                        {body}\r\n                </ns0:UpdateUDFValues>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n        return(True)\r\n    \r\n    #creates user defined field at the activity level i.e. fs estimate hrs, fs estimate ($) (we use the create operation if there was no value before)\r\n    def createFSActuals(Activites):\r\n        url = serviceURL(\"UDFValueService\")\r\n        #QAS and PRD have different code values, once PRD codes found update the if to reflect PRD codes\r\n        if Environment == \"QAS\":\r\n            FSActualsdollarcode = \"1059\"\r\n            FSActualshrscode = \"1058\"\r\n            FSActualcostDataType = \"Text\"\r\n        elif Environment == \"PRD\":\r\n            FSActualsdollarcode = \"1061\"\r\n            FSActualshrscode = \"1058\"\r\n            FSActualcostDataType = \"Cost\"\r\n        ActivitiesToUpdate = []\r\n        for i in Activites:\r\n            #Compare original p6 value to sap value, if different at the update operation to the request body\r\n            if i['FSActual$P6'] != i['FSActual$SAP'] and pd.isna(i['FSActual$SAP']) == False:\r\n                if pd.isna(i['FSActual$P6']):\r\n                    ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:UDFValue>\r\n                            <ns0:UDFTypeObjectId>{FSActualsdollarcode}</ns0:UDFTypeObjectId>\r\n                            <ns0:ForeignObjectId>{int(i['ActivityID'])}</ns0:ForeignObjectId>\r\n                            <ns0:{FSActualcostDataType}>{i['FSActual$SAP']}</ns0:{FSActualcostDataType}>\r\n                        </ns0:UDFValue>\r\n                        \"\"\")\r\n            if i['FSActualHrsP6'] != i['FSActualHrsSAP'] and pd.isna(i['FSActualHrsSAP']) == False:\r\n                if pd.isna(i['FSActualHrsP6']):\r\n                    ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:UDFValue>\r\n                            <ns0:UDFTypeObjectId>{FSActualshrscode}</ns0:UDFTypeObjectId>\r\n                            <ns0:ForeignObjectId>{int(i['ActivityID'])}</ns0:ForeignObjectId>\r\n                            <ns0:Text>{i['FSActualHrsSAP']}</ns0:Text>\r\n                        </ns0:UDFValue>\r\n                        \"\"\")\r\n        if ActivitiesToUpdate == []:\r\n            return(True)\r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(ActivitiesToUpdate), 950):\r\n            #print(list[i:i+950])\r\n            #print(i)\r\n            body = ''\r\n            for b in ActivitiesToUpdate[i:i+950]:\r\n                body = body+b\r\n            body = f\"\"\"\r\n                <ns0:CreateUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                    {body}\r\n                </ns0:CreateUDFValues>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n        return(True)\r\n    \r\n    #This function both updates the start date of an activity and updates the status to progress from not started if time has been booked to activity\r\n    def updateActivityStatusDate(Activities):\r\n        url = serviceURL(\"ActivityService\")\r\n        ActivitiesToUpdate = []\r\n        for i in Activities:\r\n            if pd.isna(i['SAP Earliest Date']):\r\n                noUpdate = \"\"\r\n            elif i['Status'] == \"Not Started\" and pd.isna(i['SAP Earliest Date']) == False:\r\n                ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:Activity>\r\n                            <ns0:ObjectId>{int(i['ActivityID'])}</ns0:ObjectId>\r\n                            <ns0:Status>In Progress</ns0:Status>\r\n                            <ns0:StartDate>{i['SAP Earliest Date']}</ns0:StartDate>\r\n                        </ns0:Activity>\r\n                        \"\"\")\r\n            elif pd.isna(i['SAP Earliest Date']) == False and i['SAP Earliest Date'] < i['StartDate']:\r\n            #elif i['SAP Earliest Date'] < i['StartDate'] and pd.isna(i['StartDate']) == False:\r\n                ActivitiesToUpdate.append(f\"\"\"\r\n                        <ns0:Activity>\r\n                            <ns0:ObjectId>{int(i['ActivityID'])}</ns0:ObjectId>\r\n                            <ns0:StartDate>{i['SAP Earliest Date']}</ns0:StartDate>\r\n                        </ns0:Activity>\r\n                        \"\"\")\r\n        if ActivitiesToUpdate == []:\r\n            return(True)\r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(ActivitiesToUpdate), 950):\r\n            #print(list[i:i+950])\r\n            #print(i)\r\n            body = ''\r\n            for b in ActivitiesToUpdate[i:i+950]:\r\n                body = body+b\r\n            body = f\"\"\"\r\n                <ns0:UpdateActivities xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1\">\r\n                    {body}\r\n                </ns0:UpdateActivities>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n        return(True)\r\n    \r\n    #Function to return the object ID of the resource to be updated (depends on environment)\r\n    def updateEmployeeID(resources, FilePath, UpdatedActivitiesFileName):\r\n        #Update to include PRD codes once found\r\n        resourcesToUpdate = []\r\n        for i in resources:\r\n            if pd.isna(i['ResourceObjectId']):\r\n                if i['EmployeeID'] == \"Labour\":\r\n                    if Environment == \"QAS\":\r\n                        i['ResourceObjectId'] = \"4346\"  \r\n                    elif Environment == \"PRD\":    \r\n                        i['ResourceObjectId'] = \"4373\"  \r\n                elif i['EmployeeID'] == \"Material\":\r\n                    if Environment == \"QAS\":\r\n                        i['ResourceObjectId'] = \"4457\"\r\n                    elif Environment == \"PRD\":    \r\n                        i['ResourceObjectId'] = \"4387\"\r\n                elif i['EmployeeID'] == \"Services\":\r\n                    if Environment == \"QAS\":\r\n                        i['ResourceObjectId'] = \"4458\"\r\n                    elif Environment == \"PRD\":    \r\n                        i['ResourceObjectId'] = \"4388\" \r\n                else:\r\n                    resourcesToUpdate.append(i['EmployeeID'])\r\n        if resourcesToUpdate == []:\r\n            return(resources)\r\n        #Remove duplicates from list\r\n        resourcesToUpdate = list(dict.fromkeys(resourcesToUpdate))\r\n        #Get all resource object ID's for missing people\r\n        url = serviceURL(\"ResourceService\")\r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(resourcesToUpdate), 950):\r\n            resourceIDString = ''\r\n            for b in resourcesToUpdate[i:i+950]:\r\n                if resourceIDString == '':\r\n                    resourceIDString = \"'\" + str(b).zfill(8) + \"'\"\r\n                else:\r\n                    resourceIDString = resourceIDString+ \", '\" + str(b).zfill(8) + \"'\"\r\n            body = f\"\"\"<ns0:ReadResources xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Resource/V1\">\r\n                <ns0:Field>Name</ns0:Field>\r\n                <ns0:Field>Id</ns0:Field>\r\n                <ns0:Field>ObjectId</ns0:Field>\r\n                <ns0:Field>ResourceType</ns0:Field>\r\n                <ns0:Filter>Id in ({resourceIDString})</ns0:Filter>\r\n            </ns0:ReadResources>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n            #If employee's are returned from the api call, these will be updated in the dictionary\r\n            try:\r\n                x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadResourcesResponse']['Resource']\r\n                if type(x) is dict:\r\n                    x = [x]\r\n                #loop through to add resource object ID's baesd on employee ID match\r\n                for i in x:\r\n                    for o in resources:\r\n                        if i['Id'] == str(o['EmployeeID']).zfill(8) and pd.isna(o['ResourceObjectId']):\r\n                            o['ResourceObjectId'] = i['ObjectId']\r\n            except KeyError:\r\n                #Basically do nothing, we will want to iterate over and flag any that could not be found in the next step\r\n                x = ''\r\n        for o in resources:\r\n            if pd.isna(o['ResourceObjectId']):\r\n                o['ResourceObjectId'] = \"Employee does not exist in P6\"\r\n        #export to excel incase there are employee's that could not be found we can alert the runner\r\n        dfobj = pd.DataFrame()\r\n        #Setup file path for excel\r\n        for i in resources:\r\n            df = pd.DataFrame(i, index=[0])\r\n            dfobj = dfobj.append(df, ignore_index=True)\r\n        dfobj.to_excel(FilePath + UpdatedActivitiesFileName, index=False)\r\n        return(resources)\r\n    \r\n    def updateResourceAssignments(resourceAssignments):\r\n        url = serviceURL(\"ResourceAssignmentService\")\r\n        ActivitiesToUpdate = []\r\n        #Updating assignments with existing values in P6... check if assignmentobjectid is not a number\r\n        for i in resourceAssignments:\r\n            if pd.isna(i['AssignmentObjectID']) == False and pd.isna(i['Resource Name']) == False:\r\n            #if pd.isna(i['AssignmentObjectID']) == False:\r\n                #print(resourceAssignmentCode(i[\"EmployeeID\"]))\r\n                print(i)\r\n                if i['Actual Hrs'] != i['SAP Actual Hours'] or i['Actual Cost'] != i['SAP Actual Cost']:\r\n                    if pd.isna(i['SAP Actual Cost']):\r\n                        SC ='0'\r\n                    else:\r\n                        SC = i['SAP Actual Cost']\r\n                    if pd.isna(i['SAP Actual Hours']):\r\n                        SH ='0'\r\n                    else:\r\n                        SH = i['SAP Actual Hours']\r\n                    ActivitiesToUpdate.append(f\"\"\"\r\n                    <ns0:ResourceAssignment>\r\n                        <ns0:ObjectId>{int(i['AssignmentObjectID'])}</ns0:ObjectId>\r\n                        <ns0:ResourceObjectId>{int(i['ResourceObjectId'])}</ns0:ResourceObjectId>\r\n                        <ns0:ActualCost>{SC}</ns0:ActualCost>\r\n                        <ns0:ActualUnits>{SH}</ns0:ActualUnits>\r\n                        <ns0:IsCostUnitsLinked>False</ns0:IsCostUnitsLinked>\r\n                    </ns0:ResourceAssignment>\r\n                    \"\"\")\r\n        if ActivitiesToUpdate == []:\r\n            return(True)\r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(ActivitiesToUpdate), 950):\r\n            body = ''\r\n            for b in ActivitiesToUpdate[i:i+950]:\r\n                body = body+b\r\n            body = f\"\"\"\r\n                <ns0:UpdateResourceAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ResourceAssignment/V1\">\r\n                    {body}\r\n                </ns0:UpdateResourceAssignments>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n        return(True)\r\n    \r\n    def createResourceAssignments(resourceAssignments):\r\n        url = serviceURL(\"ResourceAssignmentService\")\r\n        ActivitiesToUpdate = []\r\n        #Updating assignments with no existing values in P6... check if assignmentobjectid is not a number\r\n        for i in resourceAssignments:\r\n            if pd.isna(i['AssignmentObjectID']) and i['ResourceObjectId'] != 'Employee does not exist in P6':\r\n                if pd.isna(i['SAP Actual Cost']):\r\n                    SC ='0'\r\n                else:\r\n                    SC = i['SAP Actual Cost']\r\n                if pd.isna(i['SAP Actual Hours']):\r\n                    SH ='0'\r\n                else:\r\n                    SH = i['SAP Actual Hours']\r\n                ActivitiesToUpdate.append(f\"\"\"\r\n                <ns0:ResourceAssignment>\r\n                    <ns0:ActivityObjectId>{int(i['ActivityID'])}</ns0:ActivityObjectId>\r\n                    <ns0:ResourceObjectId>{int(i['ResourceObjectId'])}</ns0:ResourceObjectId>\r\n                    <ns0:ActualCost>{SC}</ns0:ActualCost>\r\n                    <ns0:ActualUnits>{SH}</ns0:ActualUnits>\r\n                    <ns0:IsCostUnitsLinked>False</ns0:IsCostUnitsLinked>\r\n                </ns0:ResourceAssignment>\r\n                \"\"\")\r\n        if ActivitiesToUpdate == []:\r\n            return(True)\r\n        \r\n        #Add outer bits to body of updates\r\n        for i in range(0, len(ActivitiesToUpdate), 950):\r\n            body = ''\r\n            for b in ActivitiesToUpdate[i:i+950]:\r\n                body = body+b\r\n            body = f\"\"\"\r\n                <ns0:CreateResourceAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ResourceAssignment/V1\">\r\n                    {body}\r\n                </ns0:CreateResourceAssignments>\r\n            \"\"\"\r\n            print(body)\r\n            #Sending the Request\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            print(x)\r\n        return(True)\r\n    \r\n    xls = pd.read_excel(FilePath + ActualsActivitiesFileName, header=0)\r\n    Activities = xls.to_dict('record')\r\n    #print(Activities)\r\n    \r\n    UpdatedActivitiesFilePath = FilePath + UpdatedActivitiesFileName\r\n    \r\n    #Update fs estimates hours and $ section\r\n    updateFSActuals(Activities)\r\n    createFSActuals(Activities)\r\n    #Update status/startdate \r\n    updateActivityStatusDate(Activities)\r\n    \r\n    #read resource list to be updates based on SAP values\r\n    xls = pd.read_excel(FilePath + ActualsResourcesFileName, header=0)\r\n    resourceAssignments = xls.to_dict('record')\r\n    resourceAssignments = updateEmployeeID(resourceAssignments, FilePath, UpdatedActivitiesFileName)\r\n    updateResourceAssignments(resourceAssignments)\r\n    createResourceAssignments(resourceAssignments)\r\n    return{'ActualsUpdatedFileName':UpdatedActivitiesFileName,'UpdatedActivitiesFilePath':UpdatedActivitiesFilePath}"
  outputs:
    - ActualsUpdatedFileName
    - UpdatedActivitiesFilePath
  results:
    - SUCCESS
