namespace: SAPtoP6IntegrationAPI
operation:
  name: ActualsP6Extraction
  inputs:
    - P6ServiceAccountUsername:
        sensitive: true
    - P6ServiceAccountPassword:
        sensitive: true
    - FilePath: 'C:/Users/svcrpabot/OneDrive - SA Power Networks/SAP to P6 Integration/'
    - ProjectInput
    - Environment
  python_action:
    use_jython: false
    script: "def execute(P6ServiceAccountUsername, P6ServiceAccountPassword, FilePath, ProjectInput, Environment):\r\n    import requests\r\n    import datetime\r\n    import random\r\n    import xmltodict\r\n    import pandas as pd\r\n    \r\n    #This script gets the primavera planned activities and resource assignments.\r\n    #Inputs: Authentication username and password, \r\n    #Outputs: activities, and excel file\r\n    \r\n    #Used to generate the nonce and created/expired times for authentication in the request\r\n    #Needs to be generated for every request\r\n    def authBody(body):\r\n       random_string = ''\r\n       for _ in range(22):\r\n          # Considering only upper and lowercase letters\r\n          random_integer = random.randint(97, 97 + 26 - 1)\r\n          flip_bit = random.randint(0, 1)\r\n          # Convert to lowercase if the flip bit is on\r\n          random_integer = random_integer - 32 if flip_bit == 1 else random_integer\r\n          # Keep appending random characters using chr(x)\r\n          random_string += (chr(random_integer))\r\n    \r\n       created = datetime.datetime.utcnow()\r\n       expired = created + datetime.timedelta(seconds= 5*60)\r\n       data = f\"\"\"\r\n        <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n            <soap-env:Header>\r\n                <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\r\n                <wsu:Timestamp>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                    <wsu:Expires>{expired.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\r\n                </wsu:Timestamp>\r\n                <wsse:UsernameToken>\r\n                    <wsse:Username>{UserName}</wsse:Username>\r\n                    <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\r\n                    <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{random_string}==</wsse:Nonce>\r\n                    <wsu:Created>{created.strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\r\n                </wsse:UsernameToken>\r\n                </wsse:Security>\r\n            </soap-env:Header>\r\n            <soap-env:Body>\r\n                {body}\r\n            </soap-env:Body>\r\n        </soap-env:Envelope>\r\n        \"\"\"\r\n       return(data)\r\n    \r\n    #Function to return endpoint URL based on environment\r\n    def serviceURL(service):\r\n        if Environment == \"QAS\":\r\n            endpoint = f\"http://prvqas612:8206/p6ws/services/{service}?wsdl\"\r\n        else:\r\n            endpoint = f\"http://prvprd612:8206/p6ws/services/{service}?wsdl\"\r\n        return(endpoint)\r\n    \r\n    #This function returns all the projects based on the code filters\r\n    def getprojectsbasedoncodes():\r\n        url = serviceURL(\"ProjectCodeService\")\r\n    \r\n        #Set Variables for QAS and PRD\r\n        if Environment == 'QAS':\r\n            fsReportingCode = \"665\"\r\n            fsRunActualsCode = \"1044\"\r\n            fsCompleteCode = \"731\"\r\n        else:\r\n            fsReportingCode = \"665\"\r\n            fsRunActualsCode = \"1173\"\r\n            fsCompleteCode = \"731\"\r\n    \r\n        #get all projects that equal fs-reporting code value\r\n        body = f\"\"\"\r\n            <ns0:LoadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ProjectCode/V1\">\r\n                <ns0:ObjectId>{fsReportingCode}</ns0:ObjectId>\r\n                <ns0:Field>ObjectId</ns0:Field>\r\n                <ns0:Field>Id</ns0:Field>\r\n            </ns0:LoadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x =x ['SOAP-ENV:Envelope']['SOAP-ENV:Body']['LoadProjectsResponse']['ProjectObjectIds']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        fsreportingProjectIDS = []\r\n        for i in x:\r\n            fsreportingProjectIDS.append(i)\r\n    \r\n        #get all projects that equal runactuals code value\r\n        body = f\"\"\"\r\n            <ns0:LoadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ProjectCode/V1\">\r\n                <ns0:ObjectId>{fsRunActualsCode}</ns0:ObjectId>\r\n                <ns0:Field>ObjectId</ns0:Field>\r\n                <ns0:Field>Id</ns0:Field>\r\n            </ns0:LoadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x =x ['SOAP-ENV:Envelope']['SOAP-ENV:Body']['LoadProjectsResponse']['ProjectObjectIds']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        runActualsProjectIDS = []\r\n        for i in x:\r\n            runActualsProjectIDS.append(i)\r\n    \r\n        #get all projects that equal fs project schedular completed code value (to remove from other project ID's)\r\n        body = f\"\"\"\r\n            <ns0:LoadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ProjectCode/V1\">\r\n                <ns0:ObjectId>{fsCompleteCode}</ns0:ObjectId>\r\n                <ns0:Field>ObjectId</ns0:Field>\r\n                <ns0:Field>Id</ns0:Field>\r\n            </ns0:LoadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x =x ['SOAP-ENV:Envelope']['SOAP-ENV:Body']['LoadProjectsResponse']['ProjectObjectIds']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        fsSchedCompleteProjectIDS = []\r\n        for i in x:\r\n            fsSchedCompleteProjectIDS.append(i)\r\n        #Find matches for the first two conditions and remove projects markes as completed\r\n        x = (set(fsreportingProjectIDS) & set(runActualsProjectIDS)) -set(fsSchedCompleteProjectIDS)\r\n        projectIDS=''\r\n        for i in x:\r\n            if projectIDS == '':\r\n                projectIDS = i\r\n            else:\r\n                projectIDS = projectIDS+\",\"+i\r\n        return(projectIDS)\r\n    \r\n    #This function returns the P6 project ID's for user entered project ID's based on their ID in SAP\r\n    def getProjectIDsFromInput(projectidsstring):\r\n        url = serviceURL(\"ProjectService\")\r\n        body = f\"\"\"\r\n                <ns0:ReadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Project/V2\">\r\n                    <ns0:Field>Name</ns0:Field>\r\n                    <ns0:Field>StartDate</ns0:Field>\r\n                    <ns0:Field>ObjectId</ns0:Field>\r\n                    <ns0:Field>Id</ns0:Field>\r\n                    <ns0:Filter>Id IN ({projectidsstring})</ns0:Filter>\r\n                </ns0:ReadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadProjectsResponse']['Project']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        listOfProjectIDs = projectidsstring.replace(\"'\",\"\").split(',')\r\n        dictOfProjects = { i : False for i in listOfProjectIDs }\r\n        Projects = ''\r\n        for i in x:\r\n            dictOfProjects[i['Id']] = True\r\n            if Projects == '':\r\n                Projects = i['ObjectId']\r\n            else:\r\n                Projects = Projects+\",\"+i['ObjectId']\r\n        ValidatedDF = pd.DataFrame(dictOfProjects.items(), columns=['Project ID', 'Validation'])\r\n        ValidatedDF.to_excel(ProjectsFilePath, index=False)\r\n        return(Projects)\r\n    \r\n    #Takes the string input of validated projects and returns the P6 object ID, SAP project name and startdate of project\r\n    def getProjectIDs(projectidsstring):\r\n        url = serviceURL(\"ProjectService\")\r\n        body = f\"\"\"\r\n             <ns0:ReadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Project/V2\">\r\n                   <ns0:Field>Name</ns0:Field>\r\n                   <ns0:Field>StartDate</ns0:Field>\r\n                   <ns0:Field>ObjectId</ns0:Field>\r\n                   <ns0:Field>Id</ns0:Field>\r\n                   <ns0:Filter>ObjectId IN ({projectidsstring})</ns0:Filter>\r\n             </ns0:ReadProjects>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadProjectsResponse']['Project']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        Projects = {}\r\n        for i in x:\r\n            Projects[i['ObjectId']] = {}\r\n            Projects[i['ObjectId']]['ProjectSAPID'] = i['Id']\r\n            Projects[i['ObjectId']]['ProjectID'] = i['ObjectId']\r\n        return(Projects)\r\n    \r\n    #This function takes the project object ID's and finds activities that have a FS order number, these get returned as a dictionary\r\n    def getFSOrderNum(ProjectsDict):\r\n        ProjectStringUDF = \"\"\r\n        for i in ProjectsDict:\r\n            if ProjectStringUDF == \"\":\r\n                ProjectStringUDF = i\r\n            else:\r\n                ProjectStringUDF = ProjectStringUDF+ \",\" + i\r\n        url = serviceURL(\"UDFValueService\")\r\n        body = f\"\"\"\r\n            <ns0:ReadUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                <ns0:Field>UDFTypeTitle</ns0:Field>\r\n                <ns0:Field>CodeValue</ns0:Field>\r\n                <ns0:Field>Text</ns0:Field>\r\n                <ns0:Field>Integer</ns0:Field>\r\n                <ns0:Field>Text</ns0:Field>\r\n                <ns0:Field>ProjectObjectId</ns0:Field>\r\n                <ns0:Field>ForeignObjectId</ns0:Field>\r\n                <ns0:Field>UDFTypeSubjectArea</ns0:Field>\r\n                <ns0:Filter>ProjectObjectId IN ({ProjectStringUDF}) AND UDFTypeTitle IN ('FS - Order Number') AND UDFTypeSubjectArea = 'Activity'</ns0:Filter>\r\n            </ns0:ReadUDFValues>\r\n        \"\"\"\r\n        resp = requests.post(url, data=authBody(body))\r\n        x = xmltodict.parse(resp.content)\r\n        x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadUDFValuesResponse']['UDFValue']\r\n        if type(x) is dict:\r\n            x = [x]\r\n        Activities = {}\r\n        for i in x:\r\n            if i['UDFTypeTitle'] == 'FS - Order Number':\r\n                Activities.update({i['ForeignObjectId']: {'FSOrderNumber': i['Text'], 'ProjectObjectID': i['ProjectObjectId']}})\r\n        return(Activities)\r\n    \r\n    #Takes an input of a dictionary of activities with FS order numbers and adds the other relevant activitiy details to the dictionary\r\n    def updateActivitesDetails(activites):\r\n        url = serviceURL(\"ActivityService\")\r\n        # create Activity ID string\r\n        list = []\r\n        for i in activites:\r\n            list.append(i)\r\n        #This is to break the requests as the api has a limit of 1000 filters in the request\r\n        for i in range(0, len(list), 950):\r\n            activityIDS = ''\r\n            for b in list[i:i+950]:\r\n                if activityIDS == '':\r\n                    activityIDS = \"'\"+b+\"'\"\r\n                else:\r\n                    activityIDS = activityIDS+\", '\"+b+\"'\"\r\n            body = f\"\"\"\r\n                <ns0:ReadActivities xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1\">\r\n                      <ns0:Field>ObjectId</ns0:Field>\r\n                      <ns0:Field>ActualStartDate</ns0:Field>\r\n                      <ns0:Field>Status</ns0:Field>\r\n                      <ns0:Field>Name</ns0:Field>\r\n                      <ns0:Filter>ObjectId IN ({activityIDS})</ns0:Filter>\r\n                </ns0:ReadActivities>\r\n            \"\"\"\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadActivitiesResponse']['Activity']\r\n            if type(x) is dict:\r\n                x = [x]\r\n            for i in x:\r\n                activites[i['ObjectId']]['StartDate'] = i['ActualStartDate']\r\n                activites[i['ObjectId']]['Status'] = i['Status']\r\n                activites[i['ObjectId']]['Activity Name'] = i['Name']\r\n        return(activites)\r\n    \r\n    #This function takes the activities with FS order numbers and gets the fs estimates $ + hrs\r\n    def getexistingfsvalues(Activities):\r\n        url = serviceURL(\"UDFValueService\")\r\n        list = []\r\n        activityString = \"\"\r\n        #Build string however also adds nulls for the fs estimate hours as these are not always expected\r\n        for i in Activities:\r\n            Activities[i]['FSActual$P6']= ''\r\n            Activities[i]['FSActualHrsP6']= ''\r\n            list.append(i)\r\n                #This is to break the requests as the api has a limit of 1000 filters in the request and \r\n        for i in range(0, len(list), 950):\r\n            activityIDS = ''\r\n            for b in list[i:i+950]:\r\n                if activityIDS == '':\r\n                    activityIDS = \"'\"+b+\"'\"\r\n                else:\r\n                    activityIDS = activityIDS+\", '\"+b+\"'\"\r\n            body = f\"\"\"\r\n                 <ns0:ReadUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\r\n                       <ns0:Field>UDFTypeTitle</ns0:Field>\r\n                       <ns0:Field>CodeValue</ns0:Field>\r\n                       <ns0:Field>Text</ns0:Field>\r\n                       <ns0:Field>Cost</ns0:Field>\r\n                       <ns0:Field>Integer</ns0:Field>\r\n                       <ns0:Field>Text</ns0:Field>\r\n                       <ns0:Field>ProjectObjectId</ns0:Field>\r\n                       <ns0:Field>ForeignObjectId</ns0:Field>\r\n                       <ns0:Filter>ForeignObjectId IN ({activityIDS}) AND UDFTypeTitle IN ('FS - Actual ($)', 'FS - Actual (hrs)') AND UDFTypeSubjectArea = 'Activity'</ns0:Filter>\r\n                 </ns0:ReadUDFValues>\r\n            \"\"\"\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            try:\r\n                x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadUDFValuesResponse']['UDFValue']\r\n            except KeyError:\r\n                return(Activities)\r\n            if type(x) is dict:\r\n                x = [x]\r\n            if Environment == \"QAS\":\r\n                FSActualcostDataType = \"Text\"\r\n            elif Environment == \"PRD\":\r\n                FSActualcostDataType = \"Cost\"\r\n            for i in x:\r\n                if i['UDFTypeTitle'] == 'FS - Actual ($)':\r\n                    try:\r\n                        Activities[i['ForeignObjectId']]['FSActual$P6']= i[FSActualcostDataType]\r\n                    except KeyError:\r\n                        Activities[i['ForeignObjectId']]['FSActual$P6']= \"0\"\r\n                if i['UDFTypeTitle'] == 'FS - Actual (hrs)':\r\n                    Activities[i['ForeignObjectId']]['FSActualHrsP6']= i['Text']\r\n        return(Activities)\r\n    \r\n    #Gets the resource assignments for activities passed\r\n    def getActivityAssignments(projectActivities):\r\n        url = serviceURL(\"ResourceAssignmentService\")\r\n        resourceAssignments = pd.DataFrame()\r\n        ActivityList = []\r\n        for index, row in projectActivities.iterrows():\r\n            ActivityList.append(row['ActivityID'])\r\n        #Breaks the request up incase over 1000 Activities\r\n        for i in range(0, len(ActivityList), 950):\r\n            activityIDS = ''\r\n            for b in ActivityList[i:i+950]:\r\n                if activityIDS == '':\r\n                    activityIDS = b\r\n                else:\r\n                    activityIDS = activityIDS+\", \"+b\r\n            body = f\"\"\"\r\n                <ns0:ReadResourceAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ResourceAssignment/V1\">\r\n                   <ns0:Field>ResourceName</ns0:Field>\r\n                   <ns0:Field>ResourceObjectId</ns0:Field>\r\n                   <ns0:Field>RoleName</ns0:Field>\r\n                   <ns0:Field>ObjectId</ns0:Field>\r\n                   <ns0:Field>ActualDuration</ns0:Field>\r\n                   <ns0:Field>ActualRegularCost</ns0:Field>\r\n                   <ns0:Field>PlannedCost</ns0:Field>\r\n                   <ns0:Field>PlannedDuration</ns0:Field>\r\n                   <ns0:Field>IsCostUnitsLinked</ns0:Field>\r\n                   <ns0:Field>ActivityObjectId</ns0:Field>\r\n                   <ns0:Field>ResourceId</ns0:Field>\r\n                   <ns0:Filter>ActivityObjectId IN ({activityIDS})</ns0:Filter>\r\n             </ns0:ReadResourceAssignments>\r\n             \"\"\"\r\n            resp = requests.post(url, data=authBody(body))\r\n            x = xmltodict.parse(resp.content)\r\n            x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadResourceAssignmentsResponse']['ResourceAssignment']\r\n            if type(x) is dict:\r\n                x = [x]\r\n            for i in x:\r\n                curAssignment = {'ActivityID':i['ActivityObjectId'],'AssignmentObjectID': i['ObjectId'],'Actual Hrs': i['ActualDuration'], 'Actual Cost':i['ActualRegularCost'], \r\n                'Planned Cost': i['PlannedCost'], 'Planned Duration':i['PlannedDuration'], 'ResourceObjectId': i['ResourceObjectId'], 'Resource Name': i['ResourceName'], \r\n                'Role Name':i['RoleName'], 'EmployeeID': i['ResourceId'], 'IsCostsUnitsLinked': i['IsCostUnitsLinked'], 'SAP Actual Cost': '', 'SAP Actual Hours': '', 'FSOrderNumber':'', 'ProjectName':''}\r\n                df = pd.DataFrame(curAssignment, index=[0])\r\n                resourceAssignments = resourceAssignments.append(\r\n                    df, ignore_index=True)\r\n        return(resourceAssignments)\r\n    \r\n    ###Main Script###\r\n    #Input variables update for P6\r\n    #Username /Password\r\n    UserName = P6ServiceAccountUsername\r\n    Password = P6ServiceAccountPassword\r\n    \r\n    #Environment setup (QAS or PRD)\r\n    Environment = Environment\r\n    \r\n    #Clean string input\r\n    i = ProjectInput\r\n    i = i.upper().replace(\" \", '')\r\n    ProjectString = ''\r\n    i = i.split(',')\r\n    for o in i:\r\n        if o == \"ALL\":\r\n            ProjectString = \"ALL\"\r\n        else:\r\n            if len(o) == 9:\r\n                if ProjectString == '':\r\n                    ProjectString = \"'\" + o + \"'\"\r\n                else:\r\n                    ProjectString = ProjectString + \",'\"+o+\"'\"\r\n    \r\n    #Users can either run for all projects or specific\r\n    # - For all projects the script gets projects based on their code values\r\n    # - Otherwise the projects entered will be ran\r\n    d1 = datetime.datetime.now().strftime(\"%d_%m_%Y-%H%M\")\r\n    ProjectsFileName = d1 + ' ActualProjects.xlsx'\r\n    ProjectsFilePath = FilePath + ProjectsFileName\r\n    \r\n    if ProjectString == \"ALL\":\r\n        projectidstring = getprojectsbasedoncodes()\r\n    else:\r\n        projectidstring = getProjectIDsFromInput(ProjectString)\r\n    \r\n    #Create dictionary of projects based on input\r\n    Projects = getProjectIDs(projectidstring)\r\n    \r\n    #Get Activities with FS order numbers\r\n    Activities = getFSOrderNum(Projects)\r\n    \r\n    #Now get the details for those activities\r\n    Activities = updateActivitesDetails(Activities)\r\n    \r\n    #Add fs actual costs/hrs to dictionary\r\n    Activities = getexistingfsvalues(Activities)\r\n    \r\n    #Convert dictionary to dataframe for excel export\r\n    projectActivities = pd.DataFrame()\r\n    for i in Activities:\r\n        curActivity = {'ActivityID':i, 'ActivityName': Activities[i]['Activity Name'], 'StartDate': Activities[i]['StartDate'], 'ProjectObjectID': Activities[i]['ProjectObjectID'], \r\n        'FSOrderNumber':Activities[i]['FSOrderNumber'], 'Status':Activities[i]['Status'], 'ProjectName':Projects[Activities[i]['ProjectObjectID']]['ProjectSAPID'], \r\n        'FSActual$P6': Activities[i]['FSActual$P6'], 'FSActualHrsP6': Activities[i]['FSActualHrsP6'], \"FSActual$SAP\": '', \"FSActualHrsSAP\": '', \"SAP Earliest Date\" : '', \"Email Content\" : ''}\r\n        df = pd.DataFrame(curActivity, index=[0])\r\n        projectActivities = projectActivities.append(df, ignore_index=True)\r\n    \r\n    \r\n    #Setup file path for excel\r\n    #d1 = datetime.datetime.now().strftime(\"%d_%m_%Y-%H%M\")\r\n    ActivitiesFileName = d1 + ' ActualActivities.xlsx'\r\n    ResourcesFileName = d1 + ' ActualResources.xlsx'\r\n    ActivitiesFilePath = FilePath + ActivitiesFileName\r\n    ResourcesFilePath = FilePath + ResourcesFileName\r\n    \r\n    #Output Activities to excel\r\n    projectActivities.to_excel(ActivitiesFilePath, index=False)\r\n    \r\n    #Get activity Assignments\r\n    resourceAssignments = getActivityAssignments(projectActivities)\r\n    \r\n    #Output to excel\r\n    resourceAssignments.to_excel(ResourcesFilePath, index =False)\r\n\r\n    return{'ActivitiesFileName':ActivitiesFileName,'ActivitiesFilePath':ActivitiesFilePath,'ResourcesFileName':ResourcesFileName,'ResourcesFilePath':ResourcesFilePath,'ProjectsFileName':ProjectsFileName,'ProjectsFilePath':ProjectsFilePath}"
  outputs:
    - ActivitiesFileName
    - ResourcesFileName
    - ProjectsFileName
    - ActivitiesFilePath
    - ResourcesFilePath
    - ProjectsFilePath
  results:
    - SUCCESS
