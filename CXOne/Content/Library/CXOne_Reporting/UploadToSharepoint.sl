namespace: CXOne_Reporting
operation:
  name: UploadToSharepoint
  inputs:
    - accessTokenMSAL
    - xlsFile
    - xlsxFile
  python_action:
    use_jython: false
    script: "def execute(accessTokenMSAL,xlsxFile,xlsFile):\r\n    import requests\r\n    import atexit\r\n    import os.path\r\n    import urllib.parse\r\n    import os\r\n    from os import path\r\n    from os import listdir\r\n   \r\n    #https://sapowernetworks.sharepoint.com/sites/CustomerServices-CustomerExperience/Reporting_PowerBI \r\n    \r\n    result = \"\"\r\n    \r\n    filePath = \"C:/Users/svcrpabot/OneDrive - SA Power Networks/CXOne Reports/\"\r\n    file_path = filePath + xlsxFile\r\n    # get file size\r\n    fileSize = os.stat(file_path).st_size \r\n    #IF FILE IS GREATER THAN 4MB\r\n    if fileSize > 4000000:\r\n        headers={'Authorization': 'Bearer ' + accessTokenMSAL}\r\n        #file = 'CXone_Call_Details_v1.2021.9.xlsx'\r\n        folder_path = 'General'\r\n        response = requests.get(\"https://graph.microsoft.com/v1.0/drives/b!zkPwgfbc_ESAOWqqPA7OD9ypHlyF1ZJLpqoDA5Qn0YVBVV0ooUy4RJ00uro1ONnD/items/root:/CXone_Reports\", headers=headers)\r\n        response.raise_for_status()\r\n        folder_info = response.json()\r\n        folder_id = folder_info['id']\r\n        file_url = urllib.parse.quote(xlsxFile)\r\n        response = requests.post(f\"https://graph.microsoft.com/v1.0/drives/b!zkPwgfbc_ESAOWqqPA7OD9ypHlyF1ZJLpqoDA5Qn0YVBVV0ooUy4RJ00uro1ONnD/items/{folder_id}:/{file_url}:/createUploadSession\",headers=headers,json={'@microsoft.graphconflictBehavior':'replace','description':'A large test file','fileSystemInfo':{'@odata.type': 'microsoft.graph.fileSystemInfo'}, 'name': xlsxFile})\r\n        if response.status_code >= 200 and response.status_code < 300:\r\n            result = \"Successful\"\r\n            response.raise_for_status()\r\n            upload_session = response.json()\r\n            upload_url = upload_session['uploadUrl']\r\n            st = os.stat(file_path)\r\n            size = st.st_size\r\n            CHUNK_SIZE = 10485760\r\n            chunks = int(size / CHUNK_SIZE) + 1 if size % CHUNK_SIZE > 0 else 0\r\n            with open(file_path, 'rb') as fd:\r\n                start = 0\r\n                for chunk_num in range(chunks):\r\n                    chunk = fd.read(CHUNK_SIZE)\r\n                    bytes_read = len(chunk)\r\n                    upload_range = f'bytes {start}-{start + bytes_read - 1}/{size}'\r\n                    #print(f'chunk: {chunk_num} bytes read: {bytes_read} upload range: {upload_range}')\r\n                    response = requests.put(upload_url,headers={'Content-Length': str(bytes_read),'Content-Range': upload_range},data=chunk)\r\n                    response.raise_for_status()\r\n                    start += bytes_read\r\n                    if response.status_code >= 200 and response.status_code < 300:\r\n                        result = \"Successful\"\r\n    #IF FILE IS LESS THAN 4MB\r\n    else:\r\n    \t# read file into binary\r\n        body = open(file_path, 'rb').read()\r\n        url = 'https://graph.microsoft.com/v1.0/drives/b!zkPwgfbc_ESAOWqqPA7OD9ypHlyF1ZJLpqoDA5Qn0YVBVV0ooUy4RJ00uro1ONnD/items/root:/CXone_Reports/' + xlsxFile  + ':/content'\r\n        head = {\"Authorization\": \"Bearer \" + accessTokenMSAL, \"Content-Type\": \"application/binary\"}\r\n        response = requests.put(url, data=body, headers=head)\r\n        if response.status_code >= 200 and response.status_code < 300:\r\n            result = \"Successful\"\r\n    \r\n    if response.status_code >= 200 and response.status_code < 300:\r\n        os.remove(filePath + xlsxFile)\r\n        os.remove(filePath + xlsFile)\r\n        \r\n    return{\"result\":result}"
  outputs:
    - result
  results:
    - FAILURE: '${result == ""}'
    - SUCCESS
