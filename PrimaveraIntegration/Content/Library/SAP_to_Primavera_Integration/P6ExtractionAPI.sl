namespace: SAP_to_Primavera_Integration
operation:
  name: P6ExtractionAPI
  inputs:
    - PrimaveraUsername:
        sensitive: true
    - PrimaveraPassword:
        sensitive: true
  python_action:
    use_jython: false
    script: "# do not remove the execute function\ndef execute(PrimaveraUsername, PrimaveraPassword):\n    from asyncio.windows_events import NULL\n    import requests\n    import datetime\n    import random\n    import xmltodict\n    import pandas as pd\n    \n    #This script gets the primavera activities and resource assignments.\n    #Inputs: Authentication username and password\n    #Outputs: two excel files, one of all activities and the various details aswell as all the resource assignments for the activities\n    \n    \n    #Username /Password\n    UserName = PrimaveraUsername\n    Password = PrimaveraPassword\n    \n    filepath = 'C:/temp/P6'\n    \n    projectActivities = pd.DataFrame()\n    \n    \n    #Used to generate the nonce and created/expired times for authentication in the request\n    #Needs to be generated for every request\n    def userToken():\n       random_string = ''\n       for _ in range(22):\n          # Considering only upper and lowercase letters\n          random_integer = random.randint(97, 97 + 26 - 1)\n          flip_bit = random.randint(0, 1)\n          # Convert to lowercase if the flip bit is on\n          random_integer = random_integer - 32 if flip_bit == 1 else random_integer\n          # Keep appending random characters using chr(x)\n          random_string += (chr(random_integer))\n    \n       created = datetime.datetime.utcnow()\n       expired = created + datetime.timedelta(seconds= 5*60)\n       return({'random_string': random_string, 'created' : created, 'expired' : expired})\n    \n    #This returns extra details for the projects passed into it. i.e. the SAP project ID\n    def getProjectIDs(projectidsstring):\n       timestamp = userToken()\n       url = \"http://prvqas612:8206/p6ws/services/ProjectService?wsdl\"\n       data = f\"\"\"\n       <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n          <soap-env:Header>\n             <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n                <wsu:Timestamp>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                   <wsu:Expires>{timestamp['expired'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\n                </wsu:Timestamp>\n                <wsse:UsernameToken>\n                   <wsse:Username>{UserName}</wsse:Username>\n                   <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\n                   <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{timestamp['random_string']}==</wsse:Nonce>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                </wsse:UsernameToken>\n             </wsse:Security>\n          </soap-env:Header>\n          <soap-env:Body>\n             <ns0:ReadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Project/V2\">\n                   <ns0:Field>Name</ns0:Field>\n                   <ns0:Field>StartDate</ns0:Field>\n                   <ns0:Field>ObjectId</ns0:Field>\n                   <ns0:Field>Id</ns0:Field>\n                   <ns0:Filter>ObjectId IN ({projectidsstring})</ns0:Filter>\n             </ns0:ReadProjects>\n          </soap-env:Body>\n       </soap-env:Envelope>\n       \"\"\"\n       resp = requests.post(url, data=data)\n       x = xmltodict.parse(resp.content)\n       x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadProjectsResponse']['Project']\n       Projects = {}\n       for i in x:\n          Projects[i['ObjectId']] = {}\n          Projects[i['ObjectId']]['ProjectSAPID'] = i['Id']\n          Projects[i['ObjectId']]['ProjectID'] = i['ObjectId']\n       #Projects = {x['ObjectId']: {'ProjectSAPID':x['Id'], 'ProjectID':x['ObjectId']}}\n       return(Projects)\n    \n    \n    #Updates the activities based on the activity ID's passed into it\n    def updateActivitesDetails(activites):\n       #Update url based on service\n       url = \"http://prvqas612:8206/p6ws/services/ActivityService?wsdl\"\n    \n       #create Activity ID string\n       list = []\n       for i in activites:\n          list.append(i)\n    \n       for i in range(0, len(list), 950):\n          #print(list[i:i+950])\n          #print(i)\n          activityIDS = ''\n          for b in list[i:i+950]:\n             if activityIDS == '':\n                activityIDS = \"'\"+b+\"'\"\n             else:\n                activityIDS = activityIDS+\", '\"+b+\"'\"\n          #print(activityIDS)\n          timestamp = userToken()\n          data = f\"\"\"\n          <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n             <soap-env:Header>\n                <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n                   <wsu:Timestamp>\n                      <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                      <wsu:Expires>{timestamp['expired'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\n                   </wsu:Timestamp>\n                   <wsse:UsernameToken>\n                      <wsse:Username>{UserName}</wsse:Username>\n                      <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\n                      <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{timestamp['random_string']}==</wsse:Nonce>\n                      <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                   </wsse:UsernameToken>\n                </wsse:Security>\n             </soap-env:Header>\n             <soap-env:Body>\n                <ns0:ReadActivities xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/Activity/V1\">\n                      <ns0:Field>ObjectId</ns0:Field>\n                      <ns0:Field>ActualStartDate</ns0:Field>\n                      <ns0:Field>Status</ns0:Field>\n                      <ns0:Field>Name</ns0:Field>\n                      <ns0:Filter>ObjectId IN ({activityIDS})</ns0:Filter>\n                </ns0:ReadActivities>\n             </soap-env:Body>\n          </soap-env:Envelope>\n          \"\"\"\n    \n          resp = requests.post(url, data=data)\n          x = xmltodict.parse(resp.content)\n    \n          x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadActivitiesResponse']['Activity']\n          #print(x)\n          for i in x:\n             #activites.update({i['ObjectId']: {'StartDate': i['ActualStartDate'], 'Status': i['Status'], 'Activity Name': i['Name']}})\n             activites[i['ObjectId']]['StartDate']=i['ActualStartDate']\n             activites[i['ObjectId']]['Status']=i['Status']\n             activites[i['ObjectId']]['Activity Name']=i['Name']\n       return(activites)\n    \n    #Gets the fs order number and activity ID's based on the project ID's passed\n    def getFSOrderNum(projectIDString):\n       url = \"http://prvqas612:8206/p6ws/services/UDFValueService?wsdl\"\n       timestamp = userToken()\n       data = f\"\"\"\n       <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n          <soap-env:Header>\n             <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n                <wsu:Timestamp>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                   <wsu:Expires>{timestamp['expired'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\n                </wsu:Timestamp>\n                <wsse:UsernameToken>\n                   <wsse:Username>{UserName}</wsse:Username>\n                   <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\n                   <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{timestamp['random_string']}==</wsse:Nonce>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                </wsse:UsernameToken>\n             </wsse:Security>\n          </soap-env:Header>\n          <soap-env:Body>\n             <ns0:ReadUDFValues xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/UDFValue/V1\">\n                   <ns0:Field>UDFTypeTitle</ns0:Field>\n                   <ns0:Field>CodeValue</ns0:Field>\n                   <ns0:Field>Text</ns0:Field>\n                   <ns0:Field>Integer</ns0:Field>\n                   <ns0:Field>Text</ns0:Field>\n                   <ns0:Field>ProjectObjectId</ns0:Field>\n                   <ns0:Field>ForeignObjectId</ns0:Field>\n                   <ns0:Filter>ProjectObjectId IN ({projectIDString}) AND UDFTypeTitle = 'FS - Order Number' AND UDFTypeSubjectArea = 'Activity'</ns0:Filter>\n             </ns0:ReadUDFValues>\n          </soap-env:Body>\n       </soap-env:Envelope>\n       \"\"\"\n       resp = requests.post(url, data=data)\n       x = xmltodict.parse(resp.content)\n       x = x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadUDFValuesResponse']['UDFValue']\n       #print(x)\n       Activities = {}\n       for i in x:\n          Activities.update({i['ForeignObjectId']:{'FSOrderNumber':i['Text'], 'ProjectObjectID':i['ProjectObjectId']}})\n          #Projects[i['ProjectObjectId']]['activities'][i['ForeignObjectId']] = {'ActivityID':i['ForeignObjectId'],'FSOrderNumber':i['Text']}\n       return(Activities)\n    \n    #This function returns all the projects based on the code filters\n    def getprojectsbasedoncodes():\n       timestamp = userToken()\n       url = \"http://prvqas612:8206/p6ws/services/ProjectCodeService?wsdl\"\n    \n       data = f\"\"\"\n       <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n          <soap-env:Header>\n             <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n                <wsu:Timestamp>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                   <wsu:Expires>{timestamp['expired'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\n                </wsu:Timestamp>\n                <wsse:UsernameToken>\n                   <wsse:Username>{UserName}</wsse:Username>\n                   <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\n                   <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{timestamp['random_string']}==</wsse:Nonce>\n                   <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                </wsse:UsernameToken>\n             </wsse:Security>\n          </soap-env:Header>\n          <soap-env:Body>\n             <ns0:LoadProjects xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ProjectCode/V1\">\n                   <ns0:ObjectId>665</ns0:ObjectId>\n                   <ns0:Field>ObjectId</ns0:Field>\n                   <ns0:Field>Id</ns0:Field>\n             </ns0:LoadProjects>\n          </soap-env:Body>\n       </soap-env:Envelope>\n       \"\"\"\n       resp = requests.post(url, data=data)\n       x = xmltodict.parse(resp.content)\n       x =x ['SOAP-ENV:Envelope']['SOAP-ENV:Body']['LoadProjectsResponse']['ProjectObjectIds']\n       projectIDS = ''\n       for i in x:\n          if projectIDS == '':\n             projectIDS = \"'\"+i+\"'\"\n          else:\n             projectIDS = projectIDS+\", '\"+i+\"'\"\n       return(projectIDS)\n    \n    #Gets all the resource assignments for activities\n    def getActivityAssignments(activities):\n       resourceAssignments = pd.DataFrame()\n       url = \"http://prvqas612:8206/p6ws/services/ResourceAssignmentService?wsdl\"\n    \n       for i in range(0, len(activities), 950):\n          #print(list[i:i+950])\n          #print(i)\n          activityIDS = ''\n          for b in activities[i:i+950]:\n             if activityIDS == '':\n                activityIDS = b\n             else:\n                activityIDS = activityIDS+\", \"+b\n          timestamp = userToken()\n          data = f\"\"\"\n          <soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n             <soap-env:Header>\n                <wsse:Security soap-env:mustUnderstand=\"1\" xmlns:wsse=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd\" xmlns:wsu=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd\">\n                   <wsu:Timestamp>\n                      <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                      <wsu:Expires>{timestamp['expired'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Expires>\n                   </wsu:Timestamp>\n                   <wsse:UsernameToken>\n                      <wsse:Username>{UserName}</wsse:Username>\n                      <wsse:Password Type=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText\">{Password}</wsse:Password>\n                      <wsse:Nonce EncodingType=\"http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary\">{timestamp['random_string']}==</wsse:Nonce>\n                      <wsu:Created>{timestamp['created'].strftime(\"%Y-%m-%dT%H:%M:%SZ\")}</wsu:Created>\n                   </wsse:UsernameToken>\n                </wsse:Security>\n             </soap-env:Header>\n             <soap-env:Body>\n                <ns0:ReadResourceAssignments xmlns:ns0=\"http://xmlns.oracle.com/Primavera/P6/WS/ResourceAssignment/V1\">\n                   <ns0:Field>ResourceName</ns0:Field>\n                   <ns0:Field>ResourceObjectId</ns0:Field>\n                   <ns0:Field>RoleName</ns0:Field>\n                   <ns0:Field>ObjectId</ns0:Field>\n                   <ns0:Field>ActualDuration</ns0:Field>\n                   <ns0:Field>ActualRegularCost</ns0:Field>\n                   <ns0:Field>PlannedCost</ns0:Field>\n                   <ns0:Field>PlannedDuration</ns0:Field>\n                   <ns0:Field>IsCostUnitsLinked</ns0:Field>\n                   <ns0:Field>ActivityObjectId</ns0:Field>\n                   <ns0:Filter>ActivityObjectId IN ({activityIDS})</ns0:Filter>\n             </ns0:ReadResourceAssignments>\n             </soap-env:Body>\n          </soap-env:Envelope>\n          \"\"\"\n          resp = requests.post(url, data=data)\n          x = xmltodict.parse(resp.content)\n          x =x['SOAP-ENV:Envelope']['SOAP-ENV:Body']['ReadResourceAssignmentsResponse']['ResourceAssignment']\n          #print(x)\n          for i in x:\n             curAssignment = {'ActivityID':i['ActivityObjectId'],'AssignmentObjectID': i['ObjectId'],'Actual Hrs': i['ActualDuration'], 'Actual Cost':i['ActualRegularCost'], 'Planned Cost': i['PlannedCost'], 'Planned Duration':i['PlannedDuration'], 'ResourceObjectId': i['ResourceObjectId'], 'Resource Name': i['ResourceName'], 'Role Name':i['RoleName'], 'IsCostsUnitsLinked': i['IsCostUnitsLinked']}\n             df = pd.DataFrame(curAssignment, index=[0])\n             resourceAssignments = resourceAssignments.append(df, ignore_index=True)\n       return(resourceAssignments)\n    \n    \n    projectidstring = getprojectsbasedoncodes()\n    #update project IDs\n    Projects = getProjectIDs(projectidstring)\n    \n    #Create list of Project Object ID's, have in string with below format for api call\n    projectIDS = ''\n    for i in Projects:\n       if projectIDS == '':\n          projectIDS = \"'\"+i+\"'\"\n       else:\n          projectIDS = projectIDS+\", '\"+i+\"'\"\n    #Get activites that have fs order number based on projects \n    activites = getFSOrderNum(projectIDS)\n    \n    #Now get the details for those activities\n    activites = updateActivitesDetails(activites)\n    #print(Projects)\n    \n    #chucking to excel with dataframe\n    projectActivities = pd.DataFrame()\n    for i in activites:\n       try:\n          curActivity = {'ActivtyID':i, 'ActivityName': activites[i]['Activity Name'], 'StartDate': activites[i]['StartDate'], 'ProjectObjectID': activites[i]['ProjectObjectID'], 'FSOrderNumber':activites[i]['FSOrderNumber'], 'Status':activites[i]['Status'], 'ProjectName':Projects[activites[i]['ProjectObjectID']]['ProjectSAPID']}\n          df = pd.DataFrame(curActivity, index=[0])\n          projectActivities = projectActivities.append(df, ignore_index=True)\n       except KeyError:\n          #do nothing\n          curActivity = {}\n       \n    projectActivities[\"Activity - FS - Estimate ($)\"] = ''\n    projectActivities[\"Activity - FS - Actual ($)\"] = ''\n    projectActivities[\"SAP Earliest Date\"] = ''\n    \n    projectActivities.to_excel(filepath+'projectActivitesTest.xlsx', index =False)\n    \n    #Get activity Assignments\n    #Firstly get activities in a list\n    ActivityList = []\n    for index, row in projectActivities.iterrows():\n       ActivityList.append(row['ActivtyID'])\n    \n    resourceAssignments = getActivityAssignments(ActivityList)\n    resourceAssignments.to_excel(filepath+'resourceassignments.xlsx', index =False)\n    \n    \n    # you can add additional helper methods below."
  results:
    - SUCCESS
